
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.73 (7892) x86_64-apple-darwin17.0]

[Workspace restored from /Users/madisonlilly/.RData]
[History restored from /Users/madisonlilly/.Rapp.history]

2021-01-27 18:29:27.448 R[20861:5808780] +[NSSavePanel _warmUp] attempted warmup
> library ( swirl )

| Hi! I see that you have some variables saved in your workspace. To keep
| things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type
| rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl ()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? Madison

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 2
  |                                                                     |   0%

| In this lesson, you'll learn how to examine your local workspace in R and
| begin to explore the relationship between your workspace and the file system
| of your machine.

...
  |==                                                                   |   3%
| Because different operating systems have different conventions with regards
| to things like file paths, the outputs of these commands may vary across
| machines.

...
  |====                                                                 |   5%
| However it's important to note that R provides a common API (a common set of
| commands) for interacting with files, that way your code will work across
| different kinds of computers.

...
  |=====                                                                |   8%
| Let's jump right in so you can get a feel for how these special functions
| work!

...
  |=======                                                              |  10%
| Determine which directory your R session is using as its current working
| directory using getwd().

> getwd()
[1] "/Users/madisonlilly"

| All that hard work is paying off!
  |=========                                                            |  13%
| List all the objects in your local workspace using ls().

> ls( desk, bed, pencil, paper, laptop)
Error in ls(desk, bed, pencil, paper, laptop) : object 'pencil' not found
In addition: Warning message:
In ls(desk, bed, pencil, paper, laptop) :
  ‘desk’ converted to character string
> ls()
[1] "my_div"  "my_sqrt" "x"       "y"       "z"      

| You are quite good my friend!
  |===========                                                          |  15%
| Some R commands are the same as their equivalents commands on Linux or on a
| Mac. Both Linux and Mac operating systems are based on an operating system
| called Unix. It's always a good idea to learn more about Unix!

...
  |============                                                         |  18%
| Assign 9 to x using x <- 9.

> x <-9

| Excellent job!
  |==============                                                       |  21%
| Now take a look at objects that are in your workspace using ls().

> ls(desk, laptop, pencil, notebook)
Error in ls(desk, laptop, pencil, notebook) : object 'pencil' not found
In addition: Warning message:
In ls(desk, laptop, pencil, notebook) :
  ‘desk’ converted to character string
> ls()
[1] "my_div"  "my_sqrt" "x"       "y"       "z"      

| All that practice is paying off!
  |================                                                     |  23%
| List all the files in your working directory using list.files() or dir().

> list.files()
 [1] "Applications" "Desktop"      "Documents"    "Downloads"    "Evolution"   
 [6] "Library"      "Movies"       "Music"        "Pictures"     "Public"      
[11] "Tasks"       

| Perseverance, that's the answer.
  |==================                                                   |  26%
| As we go through this lesson, you should be examining the help page for each
| new function. Check out the help page for list.files with the command
| ?list.files.

> ?list.files
starting httpd help server ... done

| Excellent job!
  |===================                                                  |  28%
| One of the most helpful parts of any R help file is the See Also section.
| Read that section for list.files. Some of these functions may be used in
| later portions of this lesson.

...
  |=====================                                                |  31%
| Using the args() function on a function name is also a handy way to see what
| arguments a function can take.

...
  |=======================                                              |  33%
| Use the args() function to determine the arguments to list.files().

> args()
Error in args() : argument "name" is missing, with no default
> args(list.files())
NULL

| Not quite right, but keep trying. Or, type info() for more options.

| Type args(list.files) to see the arguments to list.files.

> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL

| You are amazing!
  |=========================                                            |  36%
| Assign the value of the current working directory to a variable called
| "old.dir".

> old.fir
Error: object 'old.fir' not found
> old.dir
Error: object 'old.dir' not found
> "old.dir"
[1] "old.dir"

| Almost! Try again. Or, type info() for more options.

| Type old.dir <- getwd() to assign the value of the current working directory
| to a variable called "old.dir".

> old.dir <- getwd()

| Excellent work!
  |===========================                                          |  38%
| We will use old.dir at the end of this lesson to move back to the place that
| we started. A lot of query functions like getwd() have the useful property
| that they return the answer to the question as a result of the function.

...
  |============================                                         |  41%
| Use dir.create() to create a directory in the current working directory
| called "testdir".

> dir.create()
Error in dir.create() : argument "path" is missing, with no default
> dir.create(testdir)
Error in dir.create(testdir) : object 'testdir' not found
> dir.create()
Error in dir.create() : argument "path" is missing, with no default
> dir.create() <- getwd()
Error in dir.create() <- getwd() : invalid (NULL) left side of assignment
> testdir <- getwd()

| Give it another try. Or, type info() for more options.

| Type dir.create("testdir") to create a directory in the current working
| directory called "testdir".

> dir.create("testdir")

| You're the best!
  |==============================                                       |  44%
| We will do all our work in this new directory and then delete it after we
| are done. This is the R analog to "Take only pictures, leave only
| footprints."

...
  |================================                                     |  46%
| Set your working directory to "testdir" with the setwd() command.

> setwd()
Error in setwd() : argument "dir" is missing, with no default
> setwd("testdir")

| That's a job well done!
  |==================================                                   |  49%
| In general, you will want your working directory to be someplace sensible,
| perhaps created for the specific project that you are working on. In fact,
| organizing your work in R packages using RStudio is an excellent option.
| Check out RStudio at http://www.rstudio.com/

...
  |===================================                                  |  51%
| Create a file in your working directory called "mytest.R" using the
| file.create() function.

> file.create("mytest.R")
[1] TRUE

| You got it!
  |=====================================                                |  54%
| This should be the only file in this newly created directory. Let's check
| this by listing all the files in the current directory.

> 
> list.files("mytest.R")
character(0)

| Not quite! Try again. Or, type info() for more options.

| list.files() shows that the directory only contains mytest.R.

> list.files()
[1] "mytest.R"

| Your dedication is inspiring!
  |=======================================                              |  56%
| Check to see if "mytest.R" exists in the working directory using the
| file.exists() function.

> file.exists()
Error in file.exists() : invalid 'file' argument
> file.exists("mytest.R")
[1] TRUE

| That's the answer I was looking for.
  |=========================================                            |  59%
| These sorts of functions are excessive for interactive use. But, if you are
| running a program that loops through a series of files and does some
| processing on each one, you will want to check to see that each exists
| before you try to process it.

...
  |==========================================                           |  62%
| Access information about the file "mytest.R" by using file.info().

> file.info("mytest.R")
         size isdir mode               mtime               ctime
mytest.R    0 FALSE  644 2021-01-27 19:26:49 2021-01-27 19:26:49
                       atime uid gid        uname grname
mytest.R 2021-01-27 19:26:49 501  20 madisonlilly  staff

| You are quite good my friend!
  |============================================                         |  64%
| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab
| specific items.

...
  |==============================================                       |  67%
| Change the name of the file "mytest.R" to "mytest2.R" by using
| file.rename().

> file.rename("mytest.R")
Error in file.rename("mytest.R") : 
  argument "to" is missing, with no default
> file.rename("mytest2.R")
Error in file.rename("mytest2.R") : 
  argument "to" is missing, with no default
> file.rename ("mytest2.R")
Error in file.rename("mytest2.R") : 
  argument "to" is missing, with no default
> file.rename("mytest2.R")
Error in file.rename("mytest2.R") : 
  argument "to" is missing, with no default
> file.rename
function (from, to) 
.Internal(file.rename(from, to))
<bytecode: 0x7fb80862a288>
<environment: namespace:base>

| Give it another try. Or, type info() for more options.

| file.rename("mytest.R", "mytest2.R") is the answer. Googling using key words
| from the question, along with the letter R, will often give you a good hint.

> file.rename("mytest.R", "mytest2.R")
[1] TRUE

| Keep working like that and you'll get there!
  |================================================                     |  69%
| Your operating system will provide simpler tools for these sorts of tasks,
| but having the ability to manipulate files programatically is useful. You
| might now try to delete mytest.R using file.remove('mytest.R'), but that
| won't work since mytest.R no longer exists. You have already renamed it.

...
  |==================================================                   |  72%
| Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

| You nailed it! Good job!
  |===================================================                  |  74%
| You now have two files in the current directory. That may not seem very
| interesting. But what if you were working with dozens, or millions, of
| individual files? In that case, being able to programatically act on many
| files would be absolutely necessary. Don't forget that you can, temporarily,
| leave the lesson by typing play() and then return by typing nxt().

...
  |=====================================================                |  77%
| Provide the relative path to the file "mytest3.R" by using file.path().

> file.path("mytest3.R")
[1] "mytest3.R"

| All that practice is paying off!
  |=======================================================              |  79%
| You can use file.path to construct file and directory paths that are
| independent of the operating system your R code is running on. Pass
| 'folder1' and 'folder2' as arguments to file.path to make a
| platform-independent pathname.

> file.path('folder1','folder2')
[1] "folder1/folder2"

| You nailed it! Good job!
  |=========================================================            |  82%
| Take a look at the documentation for dir.create by entering ?dir.create .
| Notice the 'recursive' argument. In order to create nested directories,
| 'recursive' must be set to TRUE.

> ?dir.create

| You got it right!
  |==========================================================           |  85%
| Create a directory in the current working directory called "testdir2" and a
| subdirectory for it called "testdir3", all in one command by using
| dir.create() and file.path().

> dir.create("testdir2"), file.path("testdir3")
Error: unexpected ',' in "dir.create("testdir2"),"
> dir.create("testdir2")file.path("testdir3")
Error: unexpected symbol in "dir.create("testdir2")file.path"
> dir.create("testdir2") file.path("testdir3")
Error: unexpected symbol in "dir.create("testdir2") file.path"
> dir.create() file.path()
Error: unexpected symbol in "dir.create() file.path"
> dir.create("testdir2")file.path("testdir3")
Error: unexpected symbol in "dir.create("testdir2")file.path"
> ir.create("testdir2") and file.path("testdir3")
Error: unexpected symbol in "ir.create("testdir2") and"
> dir.create("testdir2") and file.path("testdir3")
Error: unexpected symbol in "dir.create("testdir2") and"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the
| trick. If you forgot the recursive argument, the command may have appeared
| to work, but it didn't create the nested directory.

> dir.create(file.path('testdir2', 'testdir3')
+ ,recursive-TRUE)
Error in dir.create(file.path("testdir2", "testdir3"), recursive - TRUE) : 
  object 'recursive' not found
> dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)

| Keep up the great work!
  |============================================================         |  87%
| Go back to your original working directory using setwd(). (Recall that we
| created the variable old.dir with the full path for the orginal working
| directory at the start of these questions.)

> setwd()
Error in setwd() : argument "dir" is missing, with no default
> setwd(old.dir)

| You are quite good my friend!
  |==============================================================       |  90%
| It is often helpful to save the settings that you had before you began an
| analysis and then go back to them at the end. This trick is often used
| within functions; you save, say, the par() settings that you started with,
| mess around a bunch, and then set them back to the original values at the
| end. This isn't the same as what we have done here, but it seems similar
| enough to mention.

...
  |================================================================     |  92%
| After you finish this lesson delete the 'testdir' directory that you just
| left (and everything in it)

...
  |=================================================================    |  95%
| Take nothing but results. Leave nothing but assumptions. That sounds like
| 'Take nothing but pictures. Leave nothing but footprints.' But it makes no
| sense! Surely our readers can come up with a better motto . . .

...
  |===================================================================  |  97%
| In this lesson, you learned how to examine your R workspace and work with
| the file system of your machine from within R. Thanks for playing!

...
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? mal0042@mix.wvu.edu
What is your assignment token? 
Grade submission failed.
Press ESC if you want to exit this lesson and you
want to try to submit your grade at a later time.

| Almost! Try again.

| 

1: No
2: Yes

Selection: 2
What is your email address? 
What is your assignment token? 
Grade submission failed.
Press ESC if you want to exit this lesson and you
want to try to submit your grade at a later time.

| Give it another try.

| 

1: No
2: Yes

Selection: 1

| Great job!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 3
  |                                                                     |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...
  |===                                                                  |   4%
| The simplest way to create a sequence of numbers in R is by using the `:`
| operator. Type 1:20 to see how it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are quite good my friend!
  |======                                                               |   9%
| That gave us every integer between (and including) 1 and 20. We could also
| use it to create a sequence of real numbers. For example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| That's correct!
  |=========                                                            |  13%
| The result is a vector of real numbers starting with pi (3.142...) and
| increasing in increments of 1. The upper limit of 10 is never reached, since
| the next number in our sequence would be greater than 10.

...
  |============                                                         |  17%
| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| You got it right!
  |===============                                                      |  22%
| It counted backwards in increments of 1! It's unlikely we'd want this
| behavior, but nonetheless it's good to know how it could happen.

...
  |==================                                                   |  26%
| Remember that if you have questions about a particular R function, you can
| access its documentation with a question mark followed by the function name:
| ?function_name_here. However, in the case of an operator like the colon used
| above, you must enclose the symbol in backticks like this: ?`:`. (NOTE: The
| backtick (`) key is generally located in the top left corner of a keyboard,
| above the Tab key. If you don't have a backtick key, you can use regular
| quotes.)

...
  |=====================                                                |  30%
| Pull up the documentation for `:` now.

> ?':'

| You're the best!
  |========================                                             |  35%
| Often, we'll desire more control over a sequence we're creating than what
| the `:` operator gives us. The seq() function serves this purpose.

...
  |===========================                                          |  39%
| The most basic use of seq() does exactly the same thing as the `:` operator.
| Try seq(1, 20) to see this.

> (1,20)
Error: unexpected ',' in "(1,"
> seq(1,20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You got it right!
  |==============================                                       |  43%
| This gives us the same output as 1:20. However, let's say that instead we
| want a vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0,
| 10, by=0.5) does just that. Try it out.

> seq(0,10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0
[16]  7.5  8.0  8.5  9.0  9.5 10.0

| Perseverance, that's the answer.
  |=================================                                    |  48%
| Or maybe we don't care what the increment is and we just want a sequence of
| 30 numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it a
| shot now and store the result in a new variable called my_seq.

> seq(5,10, length=30)
 [1]  5.000000  5.172414  5.344828  5.517241  5.689655  5.862069  6.034483
 [8]  6.206897  6.379310  6.551724  6.724138  6.896552  7.068966  7.241379
[15]  7.413793  7.586207  7.758621  7.931034  8.103448  8.275862  8.448276
[22]  8.620690  8.793103  8.965517  9.137931  9.310345  9.482759  9.655172
[29]  9.827586 10.000000

| Keep trying! Or, type info() for more options.

| You're using the same function here, but changing its arguments for
| different results. Be sure to store the result in a new variable called
| my_seq, like this: my_seq <- seq(5, 10, length=30).

> my_seq(5,10, length=30)
Error in my_seq(5, 10, length = 30) : could not find function "my_seq"
> my_seq <- seq(5,10, length=30)

| You got it right!
  |====================================                                 |  52%
| To confirm that my_seq has length 30, we can use the length() function. Try
| it now.

> length()
Error in length() : 0 arguments passed to 'length' which requires 1
> length(30)
[1] 1

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Use length(my_seq) to view the length of the my_seq variable.

> length(my_seq)
[1] 30

| Your dedication is inspiring!
  |=======================================                              |  57%
| Let's pretend we don't know the length of my_seq, but we want to generate a
| sequence of integers from 1 to N, where N represents the length of the
| my_seq vector. In other words, we want a new vector (1, 2, 3, ...) that is
| the same length as my_seq.

...
  |==========================================                           |  61%
| There are several ways we could do this. One possibility is to combine the
| `:` operator and the length() function like this: 1:length(my_seq). Give
| that a try.

> 1:1length(my_seq)
Error: unexpected symbol in "1:1length"
> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| All that hard work is paying off!
  |=============================================                        |  65%
| Another option is to use seq(along.with = my_seq). Give that a try.

> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| Excellent job!
  |================================================                     |  70%
| However, as is the case with many common tasks, R has a separate built-in
| function for this purpose called seq_along(). Type seq_along(my_seq) to see
| it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| You got it right!
  |===================================================                  |  74%
| There are often several approaches to solving the same problem, particularly
| in R. Simple approaches that involve less typing are generally best. It's
| also important for your code to be readable, so that you and others can
| figure out what's going on without too much hassle.

...
  |======================================================               |  78%
| If R has a built-in function for a particular task, it's likely that
| function is highly optimized for that purpose and is your best option. As
| you become a more advanced R programmer, you'll design your own functions to
| perform tasks when there are no better options. We'll explore writing your
| own functions in future lessons.

...
  |=========================================================            |  83%
| One more function related to creating sequences of numbers is rep(), which
| stands for 'replicate'. Let's look at a few uses.

...
  |============================================================         |  87%
| If we're interested in creating a vector that contains 40 zeros, we can use
| rep(0, times = 40). Try it out.

> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[38] 0 0 0

| All that hard work is paying off!
  |===============================================================      |  91%
| If instead we want our vector to contain 10 repetitions of the vector (0, 1,
| 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0,1,2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| All that practice is paying off!
  |==================================================================   |  96%
| Finally, let's say that rather than repeating the vector (0, 1, 2) over and
| over again, we want our vector to contain 10 zeros, then 10 ones, then 10
| twos. We can do this with the `each` argument. Try rep(c(0, 1, 2), each =
| 10).

> rep(c(0,1,2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| All that hard work is paying off!
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| That's the answer I was looking for.

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 5
  |                                                                     |   0%

| Missing values play an important role in statistics and data analysis.
| Often, missing values must not be ignored, but rather they should be
| carefully studied to see if there's an underlying pattern or cause for their
| missingness.

...
  |===                                                                  |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing'
| (in the statistical sense). In this lesson, we'll explore missing values
| further.

...
  |=======                                                              |  10%
| Any operation involving NA generally yields NA as the result. To illustrate,
| let's create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| You got it!
  |==========                                                           |  15%
| Now, let's multiply x by 3.

> 3(x)
Error: attempt to apply non-function
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Give it another try. Or, type info() for more options.

| Try x * 3.

> x*3
[1] 132  NA  15  NA

| That's the answer I was looking for.
  |==============                                                       |  20%
| Notice that the elements of the resulting vector that correspond with the NA
| values in x are also NA.

...
  |=================                                                    |  25%
| To make things a little more interesting, lets create a vector containing
| 1000 draws from a standard normal distribution with y <- rnorm(1000).

> y <- nnorm(1000)
Error in nnorm(1000) : could not find function "nnorm"
> y <- rnorm(1000)

| You are amazing!
  |=====================                                                |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| That's the answer I was looking for.
  |========================                                             |  35%
| Finally, let's select 100 elements at random from these 2000 values
| (combining y and z) such that we don't know how many NAs we'll wind up with
| or what positions they'll occupy in our final vector -- my_data <-
| sample(c(y, z), 100).

> my_data <- sample(c(y,z), 100)

| Your dedication is inspiring!
  |============================                                         |  40%
| Let's first ask the question of where our NAs are located in our data. The
| is.na() function tells us whether each element of a vector is NA. Call
| is.na() on my_data and assign the result to my_na.

> is.na(my_data)
  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
 [13]  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE
 [25]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE
 [37]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE
 [49]  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
 [73]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE
 [85]  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
 [97]  TRUE  TRUE FALSE  TRUE

| One more time. You can do it! Or, type info() for more options.

| Assign the result of is.na(my_data) to the variable my_na.

> my_na <- is.na(my_data)

| You are doing so well!
  |===============================                                      |  45%
| Now, print my_na to see what you came up with.

> my_na
  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
 [13]  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE
 [25]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE
 [37]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE
 [49]  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
 [73]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE
 [85]  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
 [97]  TRUE  TRUE FALSE  TRUE

| Nice work!
  |==================================                                   |  50%
| Everywhere you see a TRUE, you know the corresponding element of my_data is
| NA. Likewise, everywhere you see a FALSE, you know the corresponding element
| of my_data is one of our random draws from the standard normal distribution.

...
  |======================================                               |  55%
| In our previous discussion of logical operators, we introduced the `==`
| operator as a method of testing for equality between two objects. So, you
| might think the expression my_data == NA yields the same results as is.na().
| Give it a try.

> is.na()
Error in is.na() : 0 arguments passed to 'is.na' which requires 1
> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [25] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [49] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [73] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [97] NA NA NA NA

| Excellent job!
  |=========================================                            |  60%
| The reason you got a vector of all NAs is that NA is not really a value, but
| just a placeholder for a quantity that is not available. Therefore the
| logical expression is incomplete and R has no choice but to return a vector
| of the same length as my_data that contains all NAs.

...
  |=============================================                        |  65%
| Don't worry if that's a little confusing. The key takeaway is to be cautious
| when using logical expressions anytime NAs might creep in, since a single NA
| value can derail the entire thing.

...
  |================================================                     |  70%
| So, back to the task at hand. Now that we have a vector, my_na, that has a
| TRUE for every NA and FALSE for every numeric value, we can compute the
| total number of NAs in our data.

...
  |====================================================                 |  75%
| The trick is to recognize that underneath the surface, R represents TRUE as
| the number 1 and FALSE as the number 0. Therefore, if we take the sum of a
| bunch of TRUEs and FALSEs, we get the total number of TRUEs.

...
  |=======================================================              |  80%
| Let's give that a try here. Call the sum() function on my_na to count the
| total number of TRUEs in my_na, and thus the total number of NAs in my_data.
| Don't assign the result to a new variable.

> sum(my_na)
[1] 49

| You are really on a roll!
  |===========================================================          |  85%
| Pretty cool, huh? Finally, let's take a look at the data to convince
| ourselves that everything 'adds up'. Print my_data to the console.

> my_data
  [1]  0.89441216          NA  0.83813359 -0.34301922          NA  0.32132650
  [7]          NA          NA -0.46865244          NA          NA  0.61728961
 [13]          NA          NA          NA  0.36528621  0.45848102  2.11483028
 [19]          NA  0.31270308          NA          NA          NA -1.68363021
 [25]          NA          NA  1.30372580  1.02578198          NA          NA
 [31]          NA          NA -0.80469891          NA -0.79158984          NA
 [37]          NA          NA          NA -1.12866347          NA          NA
 [43]          NA          NA -0.53722716  0.88596893 -1.14874924  1.75675551
 [49]          NA -1.62987338          NA -1.82935293 -0.37916600  0.08134240
 [55] -0.95978722          NA          NA  0.86927815  0.09747185          NA
 [61]  0.74664104 -1.55651030 -1.00752970  0.14441484 -1.07106493  0.52219889
 [67] -0.56696192          NA -0.27148126          NA  1.59934331  2.33683790
 [73]          NA          NA          NA  0.42719959 -1.49164793 -0.13897914
 [79] -0.21483870          NA  0.62882614 -0.61809964  0.67893504          NA
 [85]          NA -0.71932967  0.94138370  0.10944436          NA          NA
 [91]          NA  0.04009512          NA -0.99057673  1.20431193          NA
 [97]          NA          NA -0.75005932          NA

| Nice work!
  |==============================================================       |  90%
| Now that we've got NAs down pat, let's look at a second type of missing
| value -- NaN, which stands for 'not a number'. To generate NaN, try dividing
| (using a forward slash) 0 by 0 now.

> 0/0
[1] NaN

| That's a job well done!
  |==================================================================   |  95%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens
| if you subtract Inf from Inf?

> Inf-Inf
[1] NaN

| You nailed it! Good job!
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| You nailed it! Good job!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 7
  |                                                                     |   0%

| In this lesson, we'll cover matrices and data frames. Both represent
| 'rectangular' data types, meaning that they are used to store tabular data,
| with rows and columns.

...0
  |==                                                                   |   3%
| The main difference, as you'll see, is that matrices can only contain a
| single class of data, while data frames can consist of many different
| classes of data.

...
  |====                                                                 |   6%
| Let's create a vector containing the numbers 1 through 20 using the `:`
| operator. Store the result in a variable called my_vector.

> 0
[1] 0

| One more time. You can do it! Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted
| to create a vector containing the numbers 1, 2, and 3 (in that order), you
| could use either c(1, 2, 3) or 1:3. In this case, we want the numbers 1
| through 20 stored in a variable called my_vector. Also, remember that you
| don't need the c() function when using `:`.

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Keep trying! Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted
| to create a vector containing the numbers 1, 2, and 3 (in that order), you
| could use either c(1, 2, 3) or 1:3. In this case, we want the numbers 1
| through 20 stored in a variable called my_vector. Also, remember that you
| don't need the c() function when using `:`.

> c(1:20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| One more time. You can do it! Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted
| to create a vector containing the numbers 1, 2, and 3 (in that order), you
| could use either c(1, 2, 3) or 1:3. In this case, we want the numbers 1
| through 20 stored in a variable called my_vector. Also, remember that you
| don't need the c() function when using `:`.

> my_vector <- 1:20

| Keep up the great work!
  |======                                                               |   8%
| View the contents of the vector you just created.

> view
Error: object 'view' not found
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Almost! Try again. Or, type info() for more options.

| Type my_vector to view its contents.

> my_vector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Your dedication is inspiring!
  |========                                                             |  11%
| The dim() function tells us the 'dimensions' of an object. What happens if
| we do dim(my_vector)? Give it a try.

> dim(my_vector)
NULL

| Great job!
  |==========                                                           |  14%
| Clearly, that's not very helpful! Since my_vector is a vector, it doesn't
| have a `dim` attribute (so it's just NULL), but we can find its length using
| the length() function. Try that now.

> length()
Error in length() : 0 arguments passed to 'length' which requires 1
> length(my_vector)
[1] 20

| That's a job well done!
  |============                                                         |  17%
| Ah! That's what we wanted. But, what happens if we give my_vector a `dim`
| attribute? Let's give it a try. Type dim(my_vector) <- c(4, 5).

> dim(my_vector) <- c(4,5)

| Your dedication is inspiring!
  |=============                                                        |  19%
| It's okay if that last command seemed a little strange to you. It should!
| The dim() function allows you to get OR set the `dim` attribute for an R
| object. In this case, we assigned the value c(4, 5) to the `dim` attribute
| of my_vector.

...
  |===============                                                      |  22%
| Use dim(my_vector) to confirm that we've set the `dim` attribute correctly.

> dim(my_vector)
[1] 4 5

| Keep working like that and you'll get there!
  |=================                                                    |  25%
| Another way to see this is by calling the attributes() function on
| my_vector. Try it now.

> attributes(my_vector)
$dim
[1] 4 5


| You got it right!
  |===================                                                  |  28%
| Just like in math class, when dealing with a 2-dimensional object (think
| rectangular table), the first number is the number of rows and the second is
| the number of columns. Therefore, we just gave my_vector 4 rows and 5
| columns.

...
  |=====================                                                |  31%
| But, wait! That doesn't sound like a vector any more. Well, it's not. Now
| it's a matrix. View the contents of my_vector now to see what it looks like.

> my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| All that hard work is paying off!
  |=======================                                              |  33%
| Now, let's confirm it's actually a matrix by using the class() function.
| Type class(my_vector) to see what I mean.

> class(my_vector)
[1] "matrix" "array" 

| You're the best!
  |=========================                                            |  36%
| Sure enough, my_vector is now a matrix. We should store it in a new variable
| that helps us remember what it is. Store the value of my_vector in a new
| variable called my_matrix.

> my_matrix
Error: object 'my_matrix' not found
> my_vector <- my_matrix
Error: object 'my_matrix' not found
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Since we can't just change the name of our my_vector variable, we'll assign
| its value to a new variable with my_matrix <- my_vector.

> my_matrix <- my_vector

| Excellent job!
  |===========================                                          |  39%
| The example that we've used so far was meant to illustrate the point that a
| matrix is simply an atomic vector with a dimension attribute. A more direct
| method of creating the same matrix uses the matrix() function.

...
  |=============================                                        |  42%
| Bring up the help file for the matrix() function now using the `?` function.

> ?matrix()

| Almost! Try again. Or, type info() for more options.

| The command ?matrix will do the trick.

> ?matrix

| You got it!
  |===============================                                      |  44%
| Now, look at the documentation for the matrix function and see if you can
| figure out how to create a matrix containing the same numbers (1-20) and
| dimensions (4 rows, 5 columns) by calling the matrix() function. Store the
| result in a variable called my_matrix2.

> my_matrix2 <- (1:20)

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Call the matrix() function with three arguments -- 1:20, the number of rows,
| and the number of columns. Be sure to specify arguments by their proper
| names and store the result in my_matrix2 (not in my_matrix).

> my_matrix2 <- (1:20), dim(4,5)
Error: unexpected ',' in "my_matrix2 <- (1:20),"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Not quite right, but keep trying. Or, type info() for more options.

| Call the matrix() function with three arguments -- 1:20, the number of rows,
| and the number of columns. Be sure to specify arguments by their proper
| names and store the result in my_matrix2 (not in my_matrix).

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> my_matrix2 <- c(1,20, dim(4,5)
+ 
+ my_matrix2 <- c(1,20, dim(4,5)
Error: unexpected symbol in:
"
my_matrix2"
> my_matrix2 <- c(1,20, dim(4,5)
+ matrix(x)
Error: unexpected symbol in:
"my_matrix2 <- c(1,20, dim(4,5)
matrix"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Not quite right, but keep trying. Or, type info() for more options.

| Call the matrix() function with three arguments -- 1:20, the number of rows,
| and the number of columns. Be sure to specify arguments by their proper
| names and store the result in my_matrix2 (not in my_matrix).

> my_matrix2 <- (1:20, dim(4rows,5columns)
Error: unexpected ',' in "my_matrix2 <- (1:20,"
> my_matrix2 <- (1:20 , dim(4rows,5columns)
Error: unexpected ',' in "my_matrix2 <- (1:20 ,"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Not exactly. Give it another go. Or, type info() for more options.

| Call the matrix() function with three arguments -- 1:20, the number of rows,
| and the number of columns. Be sure to specify arguments by their proper
| names and store the result in my_matrix2 (not in my_matrix).

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> skip()

| Entering the following correct answer for you...

> my_matrix2 <- matrix(1:20, nrow=4, ncol=5)

| Excellent work!
  |=================================                                    |  47%
| Finally, let's confirm that my_matrix and my_matrix2 are actually identical.
| The identical() function will tell us if its first two arguments are the
| same. Try it out.

> identical()
Error in identical() : argument "x" is missing, with no default
> identical(my_matrix, my_matrix2)
[1] TRUE

| You got it!
  |==================================                                   |  50%
| Now, imagine that the numbers in our table represent some measurements from
| a clinical experiment, where each row represents one patient and each column
| represents one variable for which measurements were taken.

...
  |====================================                                 |  53%
| We may want to label the rows, so that we know which numbers belong to each
| patient in the experiment. One way to do this is to add a column to the
| matrix, which contains the names of all four people.

...
  |======================================                               |  56%
| Let's start by creating a character vector containing the names of our
| patients -- Bill, Gina, Kelly, and Sean. Remember that double quotes tell R
| that something is a character string. Store the result in a variable called
| patients.

> patients <- (""Bill, Gina, Kelly, and Sean"")
Error: unexpected symbol in "patients <- (""Bill"
> patients <- my_vector(""Bill, Gina, Kelly, and Sean"")
Error: unexpected symbol in "patients <- my_vector(""Bill"
> patients <- (""Bill, Gina, Kelly, Sean"")
Error: unexpected symbol in "patients <- (""Bill"
> patients <- my_vector(""Bill, Gina, Kelly, Sean"")
Error: unexpected symbol in "patients <- my_vector(""Bill"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Almost! Try again. Or, type info() for more options.

| Make sure to capitalize the first letter of each name and to store the
| result in a variable called patients. Also, don't get the order of the
| patients mixed up! That would be a disaster!

> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Make sure to capitalize the first letter of each name and to store the
| result in a variable called patients. Also, don't get the order of the
| patients mixed up! That would be a disaster!

> patients <-(""Bill, Gina, Kelly, Sean"")
Error: unexpected symbol in "patients <-(""Bill"
> patients <- (""Bill, Gina, Kelly, Sean"")
Error: unexpected symbol in "patients <- (""Bill"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| One more time. You can do it! Or, type info() for more options.

| Make sure to capitalize the first letter of each name and to store the
| result in a variable called patients. Also, don't get the order of the
| patients mixed up! That would be a disaster!

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> skip()

| Entering the following correct answer for you...

> patients <- c("Bill", "Gina", "Kelly", "Sean")

| Keep working like that and you'll get there!
  |========================================                             |  58%
| Now we'll use the cbind() function to 'combine columns'. Don't worry about
| storing the result in a new variable. Just call cbind() with two arguments
| -- the patients vector and my_matrix.

> cbind(patients, my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| You got it right!
  |==========================================                           |  61%
| Something is fishy about our result! It appears that combining the character
| vector with our matrix of numbers caused everything to be enclosed in double
| quotes. This means we're left with a matrix of character strings, which is
| no good.

...
  |============================================                         |  64%
| If you remember back to the beginning of this lesson, I told you that
| matrices can only contain ONE class of data. Therefore, when we tried to
| combine a character vector with a numeric matrix, R was forced to 'coerce'
| the numbers to characters, hence the double quotes.

...
  |==============================================                       |  67%
| This is called 'implicit coercion', because we didn't ask for it. It just
| happened. But why didn't R just convert the names of our patients to
| numbers? I'll let you ponder that question on your own.

...
  |================================================                     |  69%
| So, we're still left with the question of how to include the names of our
| patients in the table without destroying the integrity of our numeric data.
| Try the following -- my_data <- data.frame(patients, my_matrix)

> my_data <-data.frame(patients, my_matrix)

| Nice work!
  |==================================================                   |  72%
| Now view the contents of my_data to see what we've come up with.

> my_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| You are doing so well!
  |====================================================                 |  75%
| It looks like the data.frame() function allowed us to store our character
| vector of names right alongside our matrix of numbers. That's exactly what
| we were hoping for!

...
  |======================================================               |  78%
| Behind the scenes, the data.frame() function takes any number of arguments
| and returns a single object of class `data.frame` that is composed of the
| original objects.

...
  |========================================================             |  81%
| Let's confirm this by calling the class() function on our newly created data
| frame.

> 
> class()
Error in class() : 0 arguments passed to 'class' which requires 1
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Not exactly. Give it another go. Or, type info() for more options.

| The class function takes one argument -- the object of which you want to
| determine the class.

> data.frame() <- class()
Error in class() : 0 arguments passed to 'class' which requires 1
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Not quite right, but keep trying. Or, type info() for more options.

| The class function takes one argument -- the object of which you want to
| determine the class.

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> skip()

| Entering the following correct answer for you...

> class(my_data)
[1] "data.frame"

| Excellent job!
  |=========================================================            |  83%
| It's also possible to assign names to the individual rows and columns of a
| data frame, which presents another possible way of determining which row of
| values in our table belongs to each patient.

...
  |===========================================================          |  86%
| However, since we've already solved that problem, let's solve a different
| problem by assigning names to the columns of our data frame so that we know
| what type of measurement each column represents.

...
  |=============================================================        |  89%
| Since we have six columns (including patient names), we'll need to first
| create a vector containing one element for each column. Create a character
| vector called cnames that contains the following values (in order) --
| "patient", "age", "weight", "bp", "rating", "test".

> cnames <- c("patient", "age", "weight", "bp", "rating", "test")

| You're the best!
  |===============================================================      |  92%
| Now, use the colnames() function to set the `colnames` attribute for our
| data frame. This is similar to the way we used the dim() function earlier in
| this lesson.

> colnames(my_data)
[1] "patients" "X1"       "X2"       "X3"       "X4"       "X5"      

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Try colnames(my_data) <- cnames.

> colnames(my_data) <- cnames

| Excellent work!
  |=================================================================    |  94%
| Let's see if that got the job done. Print the contents of my_data.

> my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| You are quite good my friend!
  |===================================================================  |  97%
| In this lesson, you learned the basics of working with two very important
| and common data structures -- matrices and data frames. There's much more to
| learn and we'll be covering more advanced topics, particularly with respect
| to data frames, in future lessons.

...
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| That's correct!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 6
  |                                                                     |   0%

| In this lesson, we'll see how to extract elements from a vector based on
| some conditions that we specify.

...
  |==                                                                   |   3%
| For example, we may only be interested in the first 20 elements of a vector,
| or only the elements that are not NA, or only those that are positive or
| correspond to a specific variable of interest. By the end of this lesson,
| you'll know how to handle each of these scenarios.

...
  |====                                                                 |   5%
| I've created for you a vector called x that contains a random ordering of 20
| numbers (from a standard normal distribution) and 20 NAs. Type x now to see
| what it looks like.

> x
 [1]           NA           NA           NA -0.347752846  0.076352521
 [6] -0.181232896  0.995140379           NA  0.991266077           NA
[11]  0.526111256           NA  0.048270115           NA           NA
[16]           NA           NA           NA -0.862821195 -0.001262099
[21]           NA  0.083626694 -0.206432803 -0.130476044 -0.761768561
[26] -0.374038429           NA  0.179217198           NA           NA
[31]  0.530844300           NA           NA -0.962033502 -0.323277150
[36]           NA  1.657097114           NA           NA -2.671307221

| Nice work!
  |=====                                                                |   8%
| The way you tell R that you want to select some particular elements (i.e. a
| 'subset') from a vector is by placing an 'index vector' in square brackets
| immediately following the name of the vector.

...
  |=======                                                              |  10%
| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1]          NA          NA          NA -0.34775285  0.07635252 -0.18123290
 [7]  0.99514038          NA  0.99126608          NA

| You got it right!
  |=========                                                            |  13%
| Index vectors come in four different flavors -- logical vectors, vectors of
| positive integers, vectors of negative integers, and vectors of character
| strings -- each of which we'll cover in this lesson.

...
  |===========                                                          |  15%
| Let's start by indexing with logical vectors. One common scenario when
| working with real-world data is that we want to extract all elements of a
| vector that are not NA (i.e. missing data). Recall that is.na(x) yields a
| vector of logical values the same length as x, with TRUEs corresponding to
| NA values in x and FALSEs corresponding to non-NA values in x.

...
  |============                                                         |  18%
| What do you think x[is.na(x)] will give you?

1: A vector of all NAs
2: A vector with no NAs
3: A vector of TRUEs and FALSEs
4: A vector of length 0

Selection: 1

| All that hard work is paying off!
  |==============                                                       |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| All that hard work is paying off!
  |================                                                     |  23%
| Recall that `!` gives us the negation of a logical expression, so !is.na(x)
| can be read as 'is not NA'. Therefore, if we want to create a vector called
| y that contains all of the non-NA values from x, we can use y <-
| x[!is.na(x)]. Give it a try.

> y <- x[!is.na(x)]

| You got it!
  |==================                                                   |  26%
| Print y to the console.

> y
 [1] -0.347752846  0.076352521 -0.181232896  0.995140379  0.991266077
 [6]  0.526111256  0.048270115 -0.862821195 -0.001262099  0.083626694
[11] -0.206432803 -0.130476044 -0.761768561 -0.374038429  0.179217198
[16]  0.530844300 -0.962033502 -0.323277150  1.657097114 -2.671307221

| Great job!
  |===================                                                  |  28%
| Now that we've isolated the non-missing values of x and put them in y, we
| can subset y as we please.

...
  |=====================                                                |  31%
| Recall that the expression y > 0 will give us a vector of logical values the
| same length as y, with TRUEs corresponding to values of y that are greater
| than zero and FALSEs corresponding to values of y that are less than or
| equal to zero. What do you think y[y > 0] will give you?

1: A vector of all the negative elements of y
2: A vector of all the positive elements of y
3: A vector of all NAs
4: A vector of length 0
5: A vector of TRUEs and FALSEs

Selection: 4

| Not quite, but you're learning! Try again.

| The logical expression y > 0 will give us TRUE for each element of y that is
| positive. Based on that, what do you think y[y > 0] will return?

1: A vector of all the positive elements of y
2: A vector of TRUEs and FALSEs
3: A vector of all NAs
4: A vector of all the negative elements of y
5: A vector of length 0

Selection: 2

| Not exactly. Give it another go.

| The logical expression y > 0 will give us TRUE for each element of y that is
| positive. Based on that, what do you think y[y > 0] will return?

1: A vector of length 0
2: A vector of all the negative elements of y
3: A vector of all NAs
4: A vector of TRUEs and FALSEs
5: A vector of all the positive elements of y

Selection: 5

| You nailed it! Good job!
  |=======================                                              |  33%
| Type y[y > 0] to see that we get all of the positive elements of y, which
| are also the positive elements of our original vector x.

> y[y>0]
[1] 0.07635252 0.99514038 0.99126608 0.52611126 0.04827012 0.08362669
[7] 0.17921720 0.53084430 1.65709711

| That's a job well done!
  |=========================                                            |  36%
| You might wonder why we didn't just start with x[x > 0] to isolate the
| positive elements of x. Try that now to see why.

> x[x>0]
 [1]         NA         NA         NA 0.07635252 0.99514038         NA
 [7] 0.99126608         NA 0.52611126         NA 0.04827012         NA
[13]         NA         NA         NA         NA         NA 0.08362669
[19]         NA 0.17921720         NA         NA 0.53084430         NA
[25]         NA         NA 1.65709711         NA         NA

| You are doing so well!
  |===========================                                          |  38%
| Since NA is not a value, but rather a placeholder for an unknown quantity,
| the expression NA > 0 evaluates to NA. Hence we get a bunch of NAs mixed in
| with our positive numbers when we do this.

...
  |============================                                         |  41%
| Combining our knowledge of logical operators with our new knowledge of
| subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x)& x>0]
[1] 0.07635252 0.99514038 0.99126608 0.52611126 0.04827012 0.08362669
[7] 0.17921720 0.53084430 1.65709711

| Perseverance, that's the answer.
  |==============================                                       |  44%
| In this case, we request only values of x that are both non-missing AND
| greater than zero.

...
  |================================                                     |  46%
| I've already shown you how to subset just the first ten values of x using
| x[1:10]. In this case, we're providing a vector of positive integers inside
| of the square brackets, which tells R to return only the elements of x
| numbered 1 through 10.

...
  |==================================                                   |  49%
| Many programming languages use what's called 'zero-based indexing', which
| means that the first element of a vector is considered element 0. R uses
| 'one-based indexing', which (you guessed it!) means the first element of a
| vector is considered element 1.

...
  |===================================                                  |  51%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint
| -- Use the c() function to specify the element numbers as a numeric vector.

> c(3,5,7)
[1] 3 5 7

| Not quite! Try again. Or, type info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the
| square brackets.

> c[(3,5,7)]
Error: unexpected ',' in "c[(3,"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| One more time. You can do it! Or, type info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the
| square brackets.

> skip()

| Entering the following correct answer for you...

> x[c(3, 5, 7)]
[1]         NA 0.07635252 0.99514038

| That's the answer I was looking for.
  |=====================================                                |  54%
| It's important that when using integer vectors to subset our vector x, we
| stick with the set of indexes {1, 2, ..., 40} since x only has 40 elements.
| What happens if we ask for the zeroth element of x (i.e. x[0])? Give it a
| try.

> x(i.e. x[0])
Error: unexpected symbol in "x(i.e. x"
> (i.e. x[0])
Error: unexpected symbol in "(i.e. x"
> x(c[0])
Error in x(c[0]) : could not find function "x"
> skip()

| Entering the following correct answer for you...

> x[0]
numeric(0)

| Keep up the great work!
  |=======================================                              |  56%
| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent
| us from doing this. What if we ask for the 3000th element of x? Try it out.

> x[0]
numeric(0)

| Not exactly. Give it another go. Or, type info() for more options.

| Request the 3000th element of x (which does not exist) with x[3000].

> x[3000]
[1] NA

| All that hard work is paying off!
  |=========================================                            |  59%
| Again, nothing useful, but R doesn't prevent us from asking for it. This
| should be a cautionary tale. You should always make sure that what you are
| asking for is within the bounds of the vector you're working with.

...
  |==========================================                           |  62%
| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It
| would be pretty tedious to construct a vector containing all numbers 1
| through 40 EXCEPT 2 and 10.

...
  |============================================                         |  64%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us
| ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of
| x EXCEPT for the 2nd and 10 elements.  Try x[c(-2, -10)] now to see this.

> x[c(-2,-10)]
 [1]           NA           NA -0.347752846  0.076352521 -0.181232896
 [6]  0.995140379           NA  0.991266077  0.526111256           NA
[11]  0.048270115           NA           NA           NA           NA
[16]           NA -0.862821195 -0.001262099           NA  0.083626694
[21] -0.206432803 -0.130476044 -0.761768561 -0.374038429           NA
[26]  0.179217198           NA           NA  0.530844300           NA
[31]           NA -0.962033502 -0.323277150           NA  1.657097114
[36]           NA           NA -2.671307221

| All that hard work is paying off!
  |==============================================                       |  67%
| A shorthand way of specifying multiple negative numbers is to put the
| negative sign out in front of the vector of positive numbers. Type x[-c(2,
| 10)] to get the exact same result.

> x[-c(2,10)]
 [1]           NA           NA -0.347752846  0.076352521 -0.181232896
 [6]  0.995140379           NA  0.991266077  0.526111256           NA
[11]  0.048270115           NA           NA           NA           NA
[16]           NA -0.862821195 -0.001262099           NA  0.083626694
[21] -0.206432803 -0.130476044 -0.761768561 -0.374038429           NA
[26]  0.179217198           NA           NA  0.530844300           NA
[31]           NA -0.962033502 -0.323277150           NA  1.657097114
[36]           NA           NA -2.671307221

| You are doing so well!
  |================================================                     |  69%
| So far, we've covered three types of index vectors -- logical, positive
| integer, and negative integer. The only remaining type requires us to
| introduce the concept of 'named' elements.

...
  |==================================================                   |  72%
| Create a numeric vector with three named elements using vect <- c(foo = 11,
| bar = 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| You nailed it! Good job!
  |===================================================                  |  74%
| When we print vect to the console, you'll see that each element has a name.
| Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| You are quite good my friend!
  |=====================================================                |  77%
| We can also get the names of vect by passing vect as an argument to the
| names() function. Give that a try.

> names()
Error in names() : 0 arguments passed to 'names' which requires 1
> names(vect)
[1] "foo"  "bar"  "norf"

| Nice work!
  |=======================================================              |  79%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do
| that now.

> vect2 <- c(11, 2, NA)

| Excellent work!
  |=========================================================            |  82%
| Then, we can add the `names` attribute to vect2 after the fact with
| names(vect2) <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| All that practice is paying off!
  |==========================================================           |  85%
| Now, let's check that vect and vect2 are the same by passing them as
| arguments to the identical() function.

> identical()
Error in identical() : argument "x" is missing, with no default
> identical(vect, vect2)
[1] TRUE

| You are quite good my friend!
  |============================================================         |  87%
| Indeed, vect and vect2 are identical named vectors.

...
  |==============================================================       |  90%
| Now, back to the matter of subsetting a vector by named elements. Which of
| the following commands do you think would give us the second element of
| vect?

1: vect[bar]
2: vect["2"]
3: vect["bar"]

Selection: 2

| Not quite right, but keep trying.

| If we want the element named "bar" (i.e. the second element of vect), which
| command would get us that?

1: vect["2"]
2: vect[bar]
3: vect["bar"]

Selection: 2

| Nice try, but that's not exactly what I was hoping for. Try again.

| If we want the element named "bar" (i.e. the second element of vect), which
| command would get us that?

1: vect[bar]
2: vect["bar"]
3: vect["2"]

Selection: 2

| Keep up the great work!
  |================================================================     |  92%
| Now, try it out.

> vect["bar"]
bar 
  2 

| All that practice is paying off!
  |=================================================================    |  95%
| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try
| it out.

> vect[c("foo","bar")]
foo bar 
 11   2 

| Perseverance, that's the answer.
  |===================================================================  |  97%
| Now you know all four methods of subsetting data from vectors. Different
| approaches are best in different scenarios and when in doubt, try it out!

...
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| Excellent job!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 8
  |                                                                     |   0%

| This lesson is meant to be a short introduction to logical operations in R.

...
  |=                                                                    |   2%
| There are two logical values in R, also called boolean values. They are TRUE
| and FALSE. In R you can construct logical expressions which will evaluate to
| either TRUE or FALSE.

...
  |===                                                                  |   4%
| Many of the questions in this lesson will involve evaluating logical
| expressions. It may be useful to open up a second R terminal where you can
| experiment with some of these expressions.

...
  |====                                                                 |   6%
| Creating logical expressions requires logical operators. You're probably
| familiar with arithmetic operators like `+`, `-`, `*`, and `/`. The first
| logical operator we are going to discuss is the equality operator,
| represented by two equals signs `==`. Use the equality operator below to
| find out if TRUE is equal to TRUE.

> 
> true=true
Error: object 'true' not found
> true==true
Error: object 'true' not found
> TRUE==TRUE
[1] TRUE

| Excellent job!
  |=====                                                                |   8%
| Just like arithmetic, logical expressions can be grouped by parenthesis so
| that the entire expression (TRUE == TRUE) == TRUE evaluates to TRUE.

...
  |=======                                                              |  10%
| To test out this property, try evaluating (FALSE == TRUE) == FALSE .

> (FALSE==TRUE)== FALSE
[1] TRUE

| You got it right!
  |========                                                             |  12%
| The equality operator can also be used to compare numbers. Use `==` to see
| if 6 is equal to 7.

> 6==7
[1] FALSE

| That's correct!
  |=========                                                            |  13%
| The previous expression evaluates to FALSE because 6 is less than 7.
| Thankfully, there are inequality operators that allow us to test if a value
| is less than or greater than another value.

...
  |===========                                                          |  15%
| The less than operator `<` tests whether the number on the left side of the
| operator (called the left operand) is less than the number on the right side
| of the operator (called the right operand). Write an expression to test
| whether 6 is less than 7.

> 6<7
[1] TRUE

| You're the best!
  |============                                                         |  17%
| There is also a less-than-or-equal-to operator `<=` which tests whether the
| left operand is less than or equal to the right operand. Write an expression
| to test whether 10 is less than or equal to 10.

> 10<==10
Error: unexpected '=' in "10<=="
> 10<=10
[1] TRUE

| That's the answer I was looking for.
  |=============                                                        |  19%
| Keep in mind that there are the corresponding greater than `>` and
| greater-than-or-equal-to `>=` operators.

...
  |===============                                                      |  21%
| Which of the following evaluates to FALSE?

1: 0 > -36
2: 6 < 8
3: 7 == 7
4: 9 >= 10

Selection: 4

| Perseverance, that's the answer.
  |================                                                     |  23%
| Which of the following evaluates to TRUE?

1: -6 > -7
2: 9 >= 10
3: 57 < 8
4: 7 == 9

Selection: 1

| That's a job well done!
  |=================                                                    |  25%
| The next operator we will discuss is the 'not equals' operator represented
| by `!=`. Not equals tests whether two values are unequal, so TRUE != FALSE
| evaluates to TRUE. Like the equality operator, `!=` can also be used with
| numbers. Try writing an expression to see if 5 is not equal to 7.

> 5!=7
[1] TRUE

| Keep working like that and you'll get there!
  |===================                                                  |  27%
| In order to negate boolean expressions you can use the NOT operator. An
| exclamation point `!` will cause !TRUE (say: not true) to evaluate to FALSE
| and !FALSE (say: not false) to evaluate to TRUE. Try using the NOT operator
| and the equals operator to find the opposite of whether 5 is equal to 7.

> 5==7
[1] FALSE

| Not quite, but you're learning! Try again. Or, type info() for more options.

| This expression may be a little tricky, so think about negating the
| expression 5 == 7 (all you need is an exclamation point in front).

> 5=7
Error in 5 = 7 : invalid (do_set) left-hand side to assignment
> !5=7
Error in !5 = 7 : target of assignment expands to non-language object
> !5==7
[1] TRUE

| All that hard work is paying off!
  |====================                                                 |  29%
| Let's take a moment to review. The equals operator `==` tests whether two
| boolean values or numbers are equal, the not equals operator `!=` tests
| whether two boolean values or numbers are unequal, and the NOT operator `!`
| negates logical expressions so that TRUE expressions become FALSE and FALSE
| expressions become TRUE.

...
  |=====================                                                |  31%
| Which of the following evaluates to FALSE?

1: !FALSE
2: 9 < 10
3: !(0 >= -1)
4: 7 != 8

Selection: 3

| Excellent work!
  |=======================                                              |  33%
| What do you think the following expression will evaluate to?: (TRUE !=
| FALSE) == !(6 == 7)

1: TRUE
2: FALSE
3: %>%
4: Can there be objective truth when programming?

Selection: 1

| Great job!
  |========================                                             |  35%
| At some point you may need to examine relationships between multiple logical
| expressions. This is where the AND operator and the OR operator come in.

...
  |=========================                                            |  37%
| Let's look at how the AND operator works. There are two AND operators in R,
| `&` and `&&`. Both operators work similarly, if the right and left operands
| of AND are both TRUE the entire expression is TRUE, otherwise it is FALSE.
| For example, TRUE & TRUE evaluates to TRUE. Try typing FALSE & FALSE to how
| it is evaluated.

> FALSE & FALSE
[1] FALSE

| Great job!
  |===========================                                          |  38%
| You can use the `&` operator to evaluate AND across a vector. The `&&`
| version of AND only evaluates the first member of a vector. Let's test both
| for practice. Type the expression TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| Excellent work!
  |============================                                         |  40%
| What happens in this case is that the left operand `TRUE` is recycled across
| every element in the vector of the right operand. This is the equivalent
| statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

...
  |=============================                                        |  42%
| Now we'll type the same expression except we'll use the `&&` operator. Type
| the expression TRUE && c(TRUE, FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE

| Excellent job!
  |===============================                                      |  44%
| In this case, the left operand is only evaluated with the first member of
| the right operand (the vector). The rest of the elements in the vector
| aren't evaluated at all in this expression.

...
  |================================                                     |  46%
| The OR operator follows a similar set of rules. The `|` version of OR
| evaluates OR across an entire vector, while the `||` version of OR only
| evaluates the first member of a vector.

...
  |=================================                                    |  48%
| An expression using the OR operator will evaluate to TRUE if the left
| operand or the right operand is TRUE. If both are TRUE, the expression will
| evaluate to TRUE, however if neither are TRUE, then the expression will be
| FALSE.

...
  |==================================                                   |  50%
| Let's test out the vectorized version of the OR operator. Type the
| expression TRUE | c(TRUE, FALSE, FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| That's the answer I was looking for.
  |====================================                                 |  52%
| Now let's try out the non-vectorized version of the OR operator. Type the
| expression TRUE || c(TRUE, FALSE, FALSE).

> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

| You nailed it! Good job!
  |=====================================                                |  54%
| Logical operators can be chained together just like arithmetic operators.
| The expressions: `6 != 10 && FALSE && 1 >= 2` or `TRUE || 5 < 9.3 || FALSE`
| are perfectly normal to see.

...
  |======================================                               |  56%
| As you may recall, arithmetic has an order of operations and so do logical
| expressions. All AND operators are evaluated before OR operators. Let's look
| at an example of an ambiguous case. Type: 5 > 8 || 6 != 8 && 4 > 3.9

> 5>8 || 6 != 8 && 4>3.9
[1] TRUE

| Your dedication is inspiring!
  |========================================                             |  58%
| Let's walk through the order of operations in the above case. First the left
| and right operands of the AND operator are evaluated. 6 is not equal 8, 4 is
| greater than 3.9, therefore both operands are TRUE so the resulting
| expression `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR
| operator is evaluated: 5 is not greater than 8 so the entire expression is
| reduced to FALSE || TRUE. Since the right operand of this expression is TRUE
| the entire expression evaluates to TRUE.

...
  |=========================================                            |  60%
| Which one of the following expressions evaluates to TRUE?

1: 99.99 > 100 || 45 < 7.3 || 4 != 4.0
2: TRUE && 62 < 62 && 44 >= 44
3: TRUE && FALSE || 9 >= 4 && 3 < 6
4: FALSE || TRUE && FALSE

Selection: 4

| Not quite, but you're learning! Try again.

| Try to evaluate each expression in isolation and build up an answer.

1: 99.99 > 100 || 45 < 7.3 || 4 != 4.0
2: TRUE && 62 < 62 && 44 >= 44
3: FALSE || TRUE && FALSE
4: TRUE && FALSE || 9 >= 4 && 3 < 6

Selection: 4

| You are really on a roll!
  |==========================================                           |  62%
| Which one of the following expressions evaluates to FALSE?

1: FALSE || TRUE && 6 != 4 || 9 > 4
2: 6 >= -9 && !(6 > 7) && !(!TRUE)
3: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
4: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5

Selection: 2

| Keep trying!

| Try to evaluate each expression in isolation and build up an answer.

1: FALSE || TRUE && 6 != 4 || 9 > 4
2: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
3: 6 >= -9 && !(6 > 7) && !(!TRUE)
4: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5

Selection: 2

| One more time. You can do it!

| Try to evaluate each expression in isolation and build up an answer.

1: FALSE || TRUE && 6 != 4 || 9 > 4
2: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
3: 6 >= -9 && !(6 > 7) && !(!TRUE)
4: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79

Selection: 2

| Your dedication is inspiring!
  |============================================                         |  63%
| Now that you're familiar with R's logical operators you can take advantage
| of a few functions that R provides for dealing with logical expressions.

...
  |=============================================                        |  65%
| The function isTRUE() takes one argument. If that argument evaluates to
| TRUE, the function will return TRUE. Otherwise, the function will return
| FALSE. Try using this function by typing: isTRUE(6 > 4)

> isTRUE (6>4)
[1] TRUE

| That's correct!
  |==============================================                       |  67%
| Which of the following evaluates to TRUE?

1: isTRUE(3)
2: isTRUE(NA)
3: !isTRUE(8 != 5)
4: isTRUE(!TRUE)
5: !isTRUE(4 < 3)

Selection: 4

| Give it another try.

| isTRUE() will only return TRUE if the statement passed to it as an argument
| is TRUE.

1: isTRUE(!TRUE)
2: isTRUE(NA)
3: !isTRUE(4 < 3)
4: !isTRUE(8 != 5)
5: isTRUE(3)

Selection: 4

| Give it another try.

| isTRUE() will only return TRUE if the statement passed to it as an argument
| is TRUE.

1: !isTRUE(4 < 3)
2: isTRUE(!TRUE)
3: !isTRUE(8 != 5)
4: isTRUE(3)
5: isTRUE(NA)

Selection: 5

| Not quite right, but keep trying.

| isTRUE() will only return TRUE if the statement passed to it as an argument
| is TRUE.

1: !isTRUE(8 != 5)
2: isTRUE(NA)
3: isTRUE(3)
4: !isTRUE(4 < 3)
5: isTRUE(!TRUE)

Selection: 4

| Excellent job!
  |================================================                     |  69%
| The function identical() will return TRUE if the two R objects passed to it
| as arguments are identical. Try out the identical() function by typing:
| identical('twins', 'twins')

> indentical('twins', 'twins')
Error in indentical("twins", "twins") : 
  could not find function "indentical"
> indentical('twins','twins')
Error in indentical("twins", "twins") : 
  could not find function "indentical"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| Give it another try. Or, type info() for more options.

| If you want to see if two R objects are identical, type: identical('twins',
| 'twins')

> identical('twins', 'twins')
[1] TRUE

| You are really on a roll!
  |=================================================                    |  71%
| Which of the following evaluates to TRUE?

1: !identical(7, 7)
2: identical(5 > 4, 3 < 3.1)
3: identical(4, 3.1)
4: identical('hello', 'Hello')

Selection: 1

| That's not the answer I was looking for, but try again.

| identical() will only evaluate to TRUE if its arguments are exactly the
| same.

1: !identical(7, 7)
2: identical('hello', 'Hello')
3: identical(5 > 4, 3 < 3.1)
4: identical(4, 3.1)

Selection: 3

| You got it right!
  |==================================================                   |  73%
| You should also be aware of the xor() function, which takes two arguments.
| The xor() function stands for exclusive OR. If one argument evaluates to
| TRUE and one argument evaluates to FALSE, then this function will return
| TRUE, otherwise it will return FALSE. Try out the xor() function by typing:
| xor(5 == 6, !FALSE)

> xor(5 == 6, !FALSE)
[1] TRUE

| You got it!
  |====================================================                 |  75%
| 5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE)
| evaluates to TRUE. On the other hand if the first argument was changed to 5
| == 5 and the second argument was unchanged then both arguments would have
| been TRUE, so xor(TRUE, TRUE) would have evaluated to FALSE.

...
  |=====================================================                |  77%
| Which of the following evaluates to FALSE?

1: xor(!isTRUE(TRUE), 6 > -1)
2: xor(4 >= 9, 8 != 8.0)
3: xor(!!TRUE, !!FALSE)
4: xor(identical(xor, 'xor'), 7 == 7.0)

Selection: 2

| Excellent work!
  |======================================================               |  79%
| For the next few questions, we're going to need to create a vector of
| integers called ints. Create this vector by typing: ints <- sample(10)

> ints <- sample(10)

| You nailed it! Good job!
  |========================================================             |  81%
| Now simply display the contents of ints.

> ints
 [1]  7 10  5  9  1  3  6  4  2  8

| That's the answer I was looking for.
  |=========================================================            |  83%
| The vector `ints` is a random sampling of integers from 1 to 10 without
| replacement. Let's say we wanted to ask some logical questions about
| contents of ints. If we type ints > 5, we will get a logical vector
| corresponding to whether each element of ints is greater than 5. Try typing:
| ints > 5

> ints>5
 [1]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE

| You nailed it! Good job!
  |==========================================================           |  85%
| We can use the resulting logical vector to ask other questions about ints.
| The which() function takes a logical vector as an argument and returns the
| indices of the vector that are TRUE. For example which(c(TRUE, FALSE, TRUE))
| would return the vector c(1, 3).

...
  |============================================================         |  87%
| Use the which() function to find the indices of ints that are greater than
| 7.

> which(>7)
Error: unexpected '>' in "which(>"
> which(7)
Error in which(7) : argument to 'which' is not logical
> which(c(>7))
Error: unexpected '>' in "which(c(>"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| Use the which() function on the logical vector produced by: `ints > 7`

> ints>7
 [1] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE

| One more time. You can do it! Or, type info() for more options.

| Use the which() function on the logical vector produced by: `ints > 7`

> which(ints>7)
[1]  2  4 10

| That's correct!
  |=============================================================        |  88%
| Which of the following commands would produce the indices of the elements in
| ints that are less than or equal to 2?

1: ints <= 2
2: which(ints <= 2)
3: which(ints < 2)
4: ints < 2

Selection: 1

| Not exactly. Give it another go.

| Use the which() function.

1: which(ints <= 2)
2: ints < 2
3: ints <= 2
4: which(ints < 2)

Selection: 1

| Perseverance, that's the answer.
  |==============================================================       |  90%
| Like the which() function, the functions any() and all() take logical
| vectors as their argument. The any() function will return TRUE if one or
| more of the elements in the logical vector is TRUE. The all() function will
| return TRUE if every element in the logical vector is TRUE.

...
  |================================================================     |  92%
| Use the any() function to see if any of the elements of ints are less than
| zero.

> any(ints<0)
[1] FALSE

| You are really on a roll!
  |=================================================================    |  94%
| Use the all() function to see if all of the elements of ints are greater
| than zero.

> all(ints>0)
[1] TRUE

| All that practice is paying off!
  |==================================================================   |  96%
| Which of the following evaluates to TRUE?

1: any(ints == 10)
2: all(c(TRUE, FALSE, TRUE))
3: any(ints == 2.5)
4: all(ints == 10)

Selection: 2

| Nice try, but that's not exactly what I was hoping for. Try again.

| any() will evaluate to TRUE if there is one or more TRUE elements in a
| logical vector.

1: any(ints == 2.5)
2: all(c(TRUE, FALSE, TRUE))
3: any(ints == 10)
4: all(ints == 10)

Selection: 3

| Great job!
  |==================================================================== |  98%
| That's all for this introduction to logic in R. If you really want to see
| what you can do with logic, check out the control flow lesson!

...
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| You got it right!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 9
  |                                                                     |   0%

| Functions are one of the fundamental building blocks of the R language. They
| are small pieces of reusable code that can be treated like any other R
| object.

...
  |=                                                                    |   2%
| If you've worked through any other part of this course, you've probably used
| some functions already. Functions are usually characterized by the name of
| the function followed by parentheses.

...
  |===                                                                  |   4%
| Let's try using a few basic functions just for fun. The Sys.Date() function
| returns a string representing today's date. Type Sys.Date() below and see
| what happens.

> Sys.Date()
[1] "2021-01-29"

| All that practice is paying off!
  |====                                                                 |   6%
| Most functions in R return a value. Functions like Sys.Date() return a value
| based on your computer's environment, while other functions manipulate input
| data in order to compute a return value.

...
  |======                                                               |   8%
| The mean() function takes a vector of numbers as input, and returns the
| average of all of the numbers in the input vector. Inputs to functions are
| often called arguments. Providing arguments to a function is also sometimes
| called passing arguments to that function. Arguments you want to pass to a
| function go inside the function's parentheses. Try passing the argument c(2,
| 4, 5) to the mean() function.

> c(2, 4, 5) -> mean()
Error in mean() <- c(2, 4, 5) : invalid (NULL) left side of assignment
> mean[c(2, 4, 5) ]
Error in mean[c(2, 4, 5)] : object of type 'closure' is not subsettable
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| You almost had it, but not quite. Try again. Or, type info() for more
| options.

| Compute the average of 2, 4, and 5 by typing: mean(c(2, 4, 5))

> mean(c(2, 4, 5))
[1] 3.666667

| You nailed it! Good job!
  |=======                                                              |  10%
| Functions usually take arguments which are variables that the function
| operates on. For example, the mean() function takes a vector as an argument,
| like in the case of mean(c(2,6,8)). The mean() function then adds up all of
| the numbers in the vector and divides that sum by the length of the vector.

...
  |========                                                             |  12%
| In the following question you will be asked to modify a script that will
| appear as soon as you move on from this question. When you have finished
| modifying the script, save your changes to the script and type submit() and
| the script will be evaluated. There will be some comments in the script that
| opens up, so be sure to read them!

...
  |==========                                                           |  14%
| The last R expression to be evaluated in a function will become the return
| value of that function. We want this function to take one argument, x, and
| return x without modifying it. Delete the pound sign so that x is returned
| without any modification. Make sure to save your script before you type
| submit().

> submit()

| Sourcing your script...


| Your dedication is inspiring!
  |===========                                                          |  16%
| Now that you've created your first function let's test it! Type:
| boring_function('My first function!'). If your function works, it should
| just return the string: 'My first function!'

> boring_function('My first function')
[1] "My first function"

| One more time. You can do it! Or, type info() for more options.

| Test boring_function by typing: boring_function('My first function!')

> boring_function('My first function!')
[1] "My first function!"

| That's the answer I was looking for.
  |=============                                                        |  18%
| Congratulations on writing your first function. By writing functions, you
| can gain serious insight into how R works. As John Chambers, the creator of
| R once said:
| 
| To understand computations in R, two slogans are helpful: 1. Everything that
| exists is an object. 2. Everything that happens is a function call.

...
  |==============                                                       |  20%
| If you want to see the source code for any function, just type the function
| name without any arguments or parentheses. Let's try this out with the
| function you just created. Type: boring_function to view its source code.

> boring_function
function(x) {
x
}
<bytecode: 0x7fb7cf7c95c8>

| You got it!
  |===============                                                      |  22%
| Time to make a more useful function! We're going to replicate the
| functionality of the mean() function by creating a function called:
| my_mean(). Remember that to calculate the average of all of the numbers in a
| vector you find the sum of all the numbers in the vector, and then divide
| that sum by the number of numbers in the vector.

...
  |=================                                                    |  24%
| Make sure to save your script before you type submit().

> my_mean
Error: object 'my_mean' not found
> my_mean()
Error in my_mean() : could not find function "my_mean"
> my_mean(boring_function)
Error in my_mean(boring_function) : could not find function "my_mean"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>
> skip()

| I just sourced the following script, which demonstrates one possible
| solution.

Press Enter when you are ready to continue...

| You got it right!
  |==================                                                   |  27%
| Now test out your my_mean() function by finding the mean of the vector c(4,
| 5, 10).

> 
> mean(c(4,5,10))
[1] 6.333333

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Run the command my_mean(c(4, 5, 10)) to test out your new function.

> my_mean(c(4,5,10))
[1] 6.333333

| All that hard work is paying off!
  |====================                                                 |  29%
| Next, let's try writing a function with default arguments. You can set
| default values for a function's arguments, and this can be useful if you
| think someone who uses your function will set a certain argument to the same
| value most of the time.

...
  |=====================                                                |  31%
| Make sure to save your script before you type submit().

> 
> submit()

| Sourcing your script...


| One more time. You can do it!

| Remember to set the appropriate default values!

> skip()

| I just sourced the following script, which demonstrates one possible
| solution.

Press Enter when you are ready to continue...

| Nice work!
  |=======================                                              |  33%
| Let's do some testing of the remainder function. Run remainder(5) and see
| what happens.

> remainder(5)
[1] 1

| All that hard work is paying off!
  |========================                                             |  35%
| Let's take a moment to examine what just happened. You provided one argument
| to the function, and R matched that argument to 'num' since 'num' is the
| first argument. The default value for 'divisor' is 2, so the function used
| the default value you provided.

...
  |=========================                                            |  37%
| Now let's test the remainder function by providing two arguments. Type:
| remainder(11, 5) and let's see what happens.

> reaminder(11,5)
Error in reaminder(11, 5) : could not find function "reaminder"
> remainder(11,5)
[1] 1

| You got it!
  |===========================                                          |  39%
| Once again, the arguments have been matched appropriately.

...
  |============================                                         |  41%
| You can also explicitly specify arguments in a function. When you explicitly
| designate argument values by name, the ordering of the arguments becomes
| unimportant. You can try this out by typing: remainder(divisor = 11, num =
| 5).

> reaminder(divisor = 11, num =5)
Error in reaminder(divisor = 11, num = 5) : 
  could not find function "reaminder"
> remainder(divisor = 11, num =5)
[1] 5

| That's correct!
  |==============================                                       |  43%
| As you can see, there is a significant difference between remainder(11, 5)
| and remainder(divisor = 11, num = 5)!

...
  |===============================                                      |  45%
| R can also partially match arguments. Try typing remainder(4, div = 2) to
| see this feature in action.

> remainder(4, div= 2)
[1] 0

| Perseverance, that's the answer.
  |================================                                     |  47%
| A word of warning: in general you want to make your code as easy to
| understand as possible. Switching around the orders of arguments by
| specifying their names or only using partial argument names can be
| confusing, so use these features with caution!

...
  |==================================                                   |  49%
| With all of this talk about arguments, you may be wondering if there is a
| way you can see a function's arguments (besides looking at the
| documentation). Thankfully, you can use the args() function! Type:
| args(remainder) to examine the arguments for the remainder function.

> args(remainder)
function (num, divisor = 2) 
NULL

| Excellent job!
  |===================================                                  |  51%
| You may not realize it but I just tricked you into doing something pretty
| interesting! args() is a function, remainder() is a function, yet remainder
| was an argument for args(). Yes it's true: you can pass functions as
| arguments! This is a very powerful concept. Let's write a script to see how
| it works.

...
  |=====================================                                |  53%
| Make sure to save your script before you type submit().

> evaluate(sum, c(5, 10, 15))
Error in evaluate(sum, c(5, 10, 15)) : could not find function "evaluate"
> help()
> skip()

| I just sourced the following script, which demonstrates one possible
| solution.

Press Enter when you are ready to continue...

| Nice work!
  |======================================                               |  55%
| Let's take your new evaluate() function for a spin! Use evaluate to find the
| standard deviation of the vector c(1.4, 3.6, 7.9, 8.8).

> evaluate(c(1.4,3.6,7.9,8.8))
Error in func(dat) : could not find function "func"
> evaluate(sd,c(1.4,3.6,7.9,8.8))
[1] 3.514138

| You are quite good my friend!
  |=======================================                              |  57%
| The idea of passing functions as arguments to other functions is an
| important and fundamental concept in programming.

...
  |=========================================                            |  59%
| You may be surprised to learn that you can pass a function as an argument
| without first defining the passed function. Functions that are not named are
| appropriately known as anonymous functions.

...
  |==========================================                           |  61%
| Let's use the evaluate function to explore how anonymous functions work. For
| the first argument of the evaluate function we're going to write a tiny
| function that fits on one line. In the second argument we'll pass some data
| to the tiny anonymous function in the first argument.

...
  |============================================                         |  63%
| Type the following command and then we'll discuss how it works:
| evaluate(function(x){x+1}, 6)

> evaluate(function(x){x+1},6)
[1] 7

| You are really on a roll!
  |=============================================                        |  65%
| The first argument is a tiny anonymous function that takes one argument `x`
| and returns `x+1`. We passed the number 6 into this function so the entire
| expression evaluates to 7.

...
  |==============================================                       |  67%
| Try using evaluate() along with an anonymous function to return the first
| element of the vector c(8, 4, 0). Your anonymous function should only take
| one argument which should be a variable `x`.

> evaluate(function(x){x[1]}, c(8,4,0))
[1] 8

| You nailed it! Good job!
  |================================================                     |  69%
| Now try using evaluate() along with an anonymous function to return the last
| element of the vector c(8, 4, 0). Your anonymous function should only take
| one argument which should be a variable `x`.

> evaluate(funtion(x){x[length(x)]}, c(8,4,0))
Error: unexpected '{' in "evaluate(funtion(x){"
> test_eval3()
Error in test_eval3() : could not find function "test_eval3"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>

| One more time. You can do it! Or, type info() for more options.

| You may need to recall how to index vector elements. Remember that your
| anonymous function should only have one argument, and that argument should
| be named `x`. Using the length() function in your anonymous function may
| help you.

> evaluate(function(x){x[length(x)]}, c(8,4,0))
[1] 0

| Keep up the great work!
  |=================================================                    |  71%
| For the rest of the course we're going to use the paste() function
| frequently. Type ?paste so we can take a look at the documentation for the
| paste function.

> ?paste

| You're the best!
  |===================================================                  |  73%
| As you can see the first argument of paste() is `...` which is referred to
| as an ellipsis or simply dot-dot-dot. The ellipsis allows an indefinite
| number of arguments to be passed into a function. In the case of paste() any
| number of strings can be passed as arguments and paste() will return all of
| the strings combined into one string.

...
  |====================================================                 |  76%
| Just to see how paste() works, type paste("Programming", "is", "fun!")

> paste("Programing", "is", "fun!")
[1] "Programing is fun!"

| That's not the answer I was looking for, but try again. Or, type info() for
| more options.

| Just type: paste("Programming", "is", "fun!")

> paste("Programming", "is", "fun!")
[1] "Programming is fun!"

| That's a job well done!
  |======================================================               |  78%
| Time to write our own modified version of paste().

...
  |=======================================================              |  80%
| Make sure to save your script before you type submit().

> test_funct4()
Error in test_funct4() : could not find function "test_funct4"
> help
function (topic, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), 
    try.all.packages = getOption("help.try.all.packages"), help_type = getOption("help_type")) 
{
    types <- c("text", "html", "pdf")
    help_type <- if (!length(help_type)) 
        "text"
    else match.arg(tolower(help_type), types)
    if (!missing(package)) 
        if (is.name(y <- substitute(package))) 
            package <- as.character(y)
    if (missing(topic)) {
        if (!is.null(package)) {
            if (interactive() && help_type == "html") {
                port <- tools::startDynamicHelp(NA)
                if (port <= 0L) 
                  return(library(help = package, lib.loc = lib.loc, 
                    character.only = TRUE))
                browser <- if (.Platform$GUI == "AQUA") {
                  get("aqua.browser", envir = as.environment("tools:RGUI"))
                }
                else getOption("browser")
                browseURL(paste0("http://127.0.0.1:", port, "/library/", 
                  package, "/html/00Index.html"), browser)
                return(invisible())
            }
            else return(library(help = package, lib.loc = lib.loc, 
                character.only = TRUE))
        }
        if (!is.null(lib.loc)) 
            return(library(lib.loc = lib.loc))
        topic <- "help"
        package <- "utils"
        lib.loc <- .Library
    }
    ischar <- tryCatch(is.character(topic) && length(topic) == 
        1L, error = function(e) FALSE)
    if (!ischar) {
        reserved <- c("TRUE", "FALSE", "NULL", "Inf", "NaN", 
            "NA", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_")
        stopic <- deparse1(substitute(topic))
        if (!is.name(substitute(topic)) && !stopic %in% reserved) 
            stop("'topic' should be a name, length-one character vector or reserved word")
        topic <- stopic
    }
    paths <- index.search(topic, find.package(if (is.null(package)) 
        loadedNamespaces()
    else package, lib.loc, verbose = verbose))
    try.all.packages <- !length(paths) && is.logical(try.all.packages) && 
        !is.na(try.all.packages) && try.all.packages && is.null(package) && 
        is.null(lib.loc)
    if (try.all.packages) {
        for (lib in .libPaths()) {
            packages <- .packages(TRUE, lib)
            packages <- packages[is.na(match(packages, .packages()))]
            paths <- c(paths, index.search(topic, file.path(lib, 
                packages)))
        }
        paths <- paths[nzchar(paths)]
    }
    structure(unique(paths), call = match.call(), topic = topic, 
        tried_all_packages = try.all.packages, type = help_type, 
        class = "help_files_with_topic")
}
<bytecode: 0x7fb82f7379e8>
<environment: namespace:utils>
> skip()

| I just sourced the following script, which demonstrates one possible
| solution.

Press Enter when you are ready to continue...

| Keep working like that and you'll get there!
  |========================================================             |  82%
| Now let's test out your telegram function. Use your new telegram function
| passing in whatever arguments you wish!

> telegram()
[1] "START STOP"

| Excellent work!
  |==========================================================           |  84%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| Try again. Getting it right on the first try is boring anyway!

| Your function should have three sections: capture the ellipsis in a list(),
| unpack the arguments from the ellipsis and assign them to variables, then
| pass those variables to paste().

> test_funct6()
Error in test_funct6() : could not find function "test_funct6"
> skip()

| I just sourced the following script, which demonstrates one possible
| solution.

Press Enter when you are ready to continue...

| You are doing so well!
  |===========================================================          |  86%
| Time to use your mad_libs function. Make sure to name the place, adjective,
| and noun arguments in order for your function to work.

> mad_libs(adjective= "", place= "", noun= "")
[1] "News from  today where  students took to the streets in protest of the new  being installed on campus."

| Great job!
  |=============================================================        |  88%
| We're coming to the end of this lesson, but there's still one more idea you
| should be made aware of.

...
  |==============================================================       |  90%
| You're familiar with adding, subtracting, multiplying, and dividing numbers
| in R. To do this you use the +, -, *, and / symbols. These symbols are
| called binary operators because they take two inputs, an input from the left
| and an input from the right.

...
  |===============================================================      |  92%
| In R you can define your own binary operators. In the next script I'll show
| you how.

...
  |=================================================================    |  94%
| Make sure to save your script before you type submit().

> 'Hello' %p% 'student!'
Error in "Hello" %p% "student!" : could not find function "%p%"
> submit()

| Sourcing your script...

Error in "Hello" %p% "student!" : unused arguments ("Hello", "student!")

| Try again. Getting it right on the first try is boring anyway!

| Remember: 'Hello' %p% 'student!' is how you use the binary operator.

> "'I'" %p% 'love' %p% 'R!'"
+ skip()
+ help()
+ 'Hello' %p% 'love' "student!"
Error: unexpected string constant in:
"help()
'Hello' %p% 'love' ""
> skip()

| I just sourced the following script, which demonstrates one possible
| solution.

Press Enter when you are ready to continue...

| Great job!
  |==================================================================   |  96%
| You made your own binary operator! Let's test it out. Paste together the
| strings: 'I', 'love', 'R!' using your new binary operator.

> 
> 'I', 'love', 'R!'
Error: unexpected ',' in "'I',"
> paste('I', 'love', 'R!')
[1] "I love R!"

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Use %p% in between each string.

> paste('I' %p% 'love' %p% 'R!')
[1] "I love R!"

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Use %p% in between each string.

> paste('I', %p% 'love', %p% 'R!')
Error: unexpected SPECIAL in "paste('I', %p%"
> ('I', %p% 'love', %p% 'R!')
Error: unexpected ',' in "('I',"
> 'I' %p% 'love' %p% 'R!'
[1] "I love R!"

| That's a job well done!
  |==================================================================== |  98%
| We've come to the end of our lesson! Go out there and write some great
| functions!

...
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| All that hard work is paying off!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 15
  |                                                                     |   0%

| One of the greatest strengths of R, relative to other programming languages,
| is the ease with which we can create publication-quality graphics. In this
| lesson, you'll learn about base graphics in R.

...
  |==                                                                   |   2%
| We do not cover the more advanced portions of graphics in R in this lesson.
| These include lattice, ggplot2 and ggvis.

...
  |===                                                                  |   4%
| There is a school of thought that this approach is backwards, that we should
| teach ggplot2 first. See
| http://varianceexplained.org/r/teach_ggplot2_to_beginners/ for an outline of
| this view.

...
  |====                                                                 |   7%
| Load the included data frame cars with data(cars).

> data(cars)

| Keep working like that and you'll get there!
  |======                                                               |   9%
| To fix ideas, we will work with simple data frames. Our main goal is to
| introduce various plotting functions and their arguments. All the output
| would look more interesting with larger, more complex data sets.

...
  |========                                                             |  11%
| Pull up the help page for cars.

> ?cars

| Keep up the great work!
  |=========                                                            |  13%
| As you can see in the help page, the cars data set has only two variables:
| speed and stopping distance. Note that the data is from the 1920s.

...
  |==========                                                           |  15%
| Run head() on the cars data.

> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10

| That's a job well done!
  |============                                                         |  17%
| Before plotting, it is always a good idea to get a sense of the data. Key R
| commands for doing so include, dim(), names(), head(), tail() and summary().

...
  |=============                                                        |  20%
| Run the plot() command on the cars data frame.

> plot(cars)

| You got it right!
  |===============                                                      |  22%
| As always, R tries very hard to give you something sensible given the
| information that you have provided to it. First, R notes that the data frame
| you have given it has just two columns, so it assumes that you want to plot
| one column versus the other.

...
  |================                                                     |  24%
| Second, since we do not provide labels for either axis, R uses the names of
| the columns. Third, it creates axis tick marks at nice round numbers and
| labels them accordingly. Fourth, it uses the other defaults supplied in
| plot().

...
  |==================                                                   |  26%
| We will now spend some time exploring plot, but many of the topics covered
| here will apply to most other R graphics functions. Note that 'plot' is
| short for scatterplot.

...
  |====================                                                 |  28%
| Look up the help page for plot().

> ?plot()

| Not quite! Try again. Or, type info() for more options.

| Type ?plot or help(plot) to view a help page for plot().

> ?plot

| Great job!
  |=====================                                                |  30%
| The help page for plot() highlights the different arguments that the
| function can take. The two most important are x and y, the variables that
| will be plotted. For the next set of questions, include the argument names
| in your answers. That is, do not type plot(cars$speed, cars$dist), although
| that will work. Instead, use plot(x = cars$speed, y = cars$dist).

...
  |======================                                               |  33%
| Use plot() command to show speed on the x-axis and dist on the y-axis from
| the cars data frame. Use the form of the plot command in which vectors are
| explicitly passed in as arguments for x and y.

> plot(x=cars$speed, y=cars$dist)

| Excellent job!
  |========================                                             |  35%
| Note that this produces a slightly different answer than plot(cars). In this
| case, R is not sure what you want to use as the labels on the axes, so it
| just uses the arguments which you pass in, data frame name and dollar signs
| included.

...
  |==========================                                           |  37%
| Note that there are other ways to call the plot command, i.e., using the
| "formula" interface. For example, we get a similar plot to the above with
| plot(dist ~ speed, cars). However, we will wait till later in the lesson
| before using the formula interface.

...
  |===========================                                          |  39%
| Use plot() command to show dist on the x-axis and speed on the y-axis from
| the cars data frame. This is the opposite of what we did above.

> plot(x=cars$dist, y=cars$speed)

| You got it right!
  |============================                                         |  41%
| It probably makes more sense for speed to go on the x-axis since stopping
| distance is a function of speed more than the other way around. So, for the
| rest of the questions in this portion of the lesson, always assign the
| arguments accordingly.

...
  |==============================                                       |  43%
| In fact, you can assume that the answers to the next few questions are all
| of the form plot(x = cars$speed, y = cars$dist, ...) but with various
| arguments used in place of the ...

...
  |===============================                                      |  46%
| Recreate the plot with the label of the x-axis set to "Speed".

> plot(x-cars$speed, y=cars$dist, xlab= "Speed")
Warning message:
In x - cars$speed :
  longer object length is not a multiple of shorter object length

| Not quite! Try again. Or, type info() for more options.

| Type plot(x = cars$speed, y = cars$dist, xlab = "Speed") to create the plot.

warning messages from top-level task callback 'mini'
Warning message:
In x - cars$speed :
  longer object length is not a multiple of shorter object length
> plot(x=cars$speed, y=cars$dist, xlab= "Speed")

| Perseverance, that's the answer.
  |=================================                                    |  48%
| Recreate the plot with the label of the y-axis set to "Stopping Distance".

> plot(x=cars$speed, y=cars$dist, ylab= "Stopping Distance")

| Great job!
  |==================================                                   |  50%
| Recreate the plot with "Speed" and "Stopping Distance" as axis labels.

> plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab= "Stopping Distance")

| That's the answer I was looking for.
  |====================================                                 |  52%
| The reason that plots(cars) worked at the beginning of the lesson was that R
| was smart enough to know that the first element (i.e., the first column) in
| cars should be assigned to the x argument and the second element to the y
| argument. To save on typing, the next set of answers will all be of the
| form, plot(cars, ...) with various arguments added.

...
  |======================================                               |  54%
| For each question, we will only want one additional argument at a time. Of
| course, you can pass in more than one argument when doing a real project.

...
  |=======================================                              |  57%
| Plot cars with a main title of "My Plot". Note that the argument for the
| main title is "main" not "title".

> plot(cars, main= "My Pilot")

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type plot(cars, main = "My Plot") to create the plot.

> plot(cars, main= "My Plot")

| You got it right!
  |========================================                             |  59%
| Plot cars with a sub title of "My Plot Subtitle".

> plot(cars, sub= "My Pilot Subtitle")

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Type plot(cars, sub = "My Plot Subtitle") to create the plot.

> plot(cars, sub= "My Plot Subtitle")

| You nailed it! Good job!
  |==========================================                           |  61%
| The plot help page (?plot) only covers a small number of the many arguments
| that can be passed in to plot() and to other graphical functions. To begin
| to explore the many other options, look at ?par. Let's look at some of the
| more commonly used ones. Continue using plot(cars, ...) as the base answer
| to these questions.

...
  |============================================                         |  63%
| Plot cars so that the plotted points are colored red. (Use col = 2 to
| achieve this effect.)

> plot(cars, col=2)

| Excellent job!
  |=============================================                        |  65%
| Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15)
| to achieve this effect.)

> plot(cars, xlim = c(10,15))

| You got it!
  |==============================================                       |  67%
| You can also change the shape of the symbols in the plot. The help page for
| points (?points) provides the details.

...
  |================================================                     |  70%
| Plot cars using triangles.  (Use pch = 2 to achieve this effect.)

> plot(cars, pch=2)

| That's a job well done!
  |==================================================                   |  72%
| Arguments like "col" and "pch" may not seem very intuitive. And that is
| because they aren't! So, many/most people use more modern packages, like
| ggplot2, for creating their graphics in R.

...
  |===================================================                  |  74%
| It is, however, useful to have an introduction to base graphics because many
| of the idioms in lattice and ggplot2 are modeled on them.

...
  |====================================================                 |  76%
| Let's now look at some other functions in base graphics that may be useful,
| starting with boxplots.

...
  |======================================================               |  78%
| Load the mtcars data frame.

> data(mtcars)

| Nice work!
  |========================================================             |  80%
| Anytime that you load up a new data frame, you should explore it before
| using it. In the middle of a swirl lesson, just type play(). This
| temporarily suspends the lesson (without losing the work you have already
| done) and allows you to issue commands like dim(mtcars) and head(mtcars).
| Once you are done examining the data, just type nxt() and the lesson will
| pick up where it left off.

...
  |=========================================================            |  83%
| Look up the help page for boxplot().

> ?boxplot

| Perseverance, that's the answer.
  |==========================================================           |  85%
| Instead of adding data columns directly as input arguments, as we did with
| plot(), it is often handy to pass in the entire data frame. This is what the
| "data" argument in boxplot() allows.

...
  |============================================================         |  87%
| boxplot(), like many R functions, also takes a "formula" argument, generally
| an expression with a tilde ("~") which indicates the relationship between
| the input variables. This allows you to enter something like mpg ~ cyl to
| plot the relationship between cyl (number of cylinders) on the x-axis and
| mpg (miles per gallon) on the y-axis.

...
  |==============================================================       |  89%
| Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box
| plot.

> boxplot(formula= mpg ~ cyl, data= mtcars)

| That's a job well done!
  |===============================================================      |  91%
| The plot shows that mpg is much lower for cars with more cylinders. Note
| that we can use the same set of arguments that we explored with plot() above
| to add axis labels, titles and so on.

...
  |================================================================     |  93%
| When looking at a single variable, histograms are a useful tool. hist() is
| the associated R function. Like plot(), hist() is best used by just passing
| in a single vector.

...
  |==================================================================   |  96%
| Use hist() with the vector mtcars$mpg to create a histogram.

> hist(mtcars$mpg)

| Great job!
  |==================================================================== |  98%
| In this lesson, you learned how to work with base graphics in R. The best
| place to go from here is to study the ggplot2 package. If you want to
| explore other elements of base graphics, then this web page
| (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful
| overview.

...
  |=====================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| You are quite good my friend!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 1



| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| Great job!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 0

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: cd ~/Desktop/Evolution/Tasks
Enter an item from the menu, or 0 to exit
Selection: git add -A
Enter an item from the menu, or 0 to exit
Selection: git commit -m "<Madison" Task 01 upload c"
Enter an item from the menu, or 0 to exit
Selection: git push -u origin master
Enter an item from the menu, or 0 to exit
Selection: 1
  |                                                                     |   0%

| In this lesson, we will explore some basic building blocks of the R
| programming language.

...
  |==                                                                   |   3%
| If at any point you'd like more information on a particular topic related to
| R, you can type help.start() at the prompt, which will open a menu of
| resources (either within RStudio or your default web browser, depending on
| your setup). Alternatively, a simple web search often yields the answer
| you're looking for.

...
  |====                                                                 |   5%
| In its simplest form, R can be used as an interactive calculator. Type 5 + 7
| and press Enter.

> cd ~/Desktop/Evolution/Tasks
Error: unexpected '/' in "cd ~/"
> git add -A
Error: unexpected symbol in "git add"
> git commit -m "<Madison" Task 01 upload c"
Error: unexpected symbol in "git commit"
> git push -u origin master
Error: unexpected symbol in "git push"
> cd ~ /Desktop/Evolution/Tasks
Error: unexpected '/' in "cd ~ /"
> git add -A
Error: unexpected symbol in "git add"
> git commit -m "<Madison" Task 01 upload c"
Error: unexpected symbol in "git commit"
> git push -u origin master
Error: unexpected symbol in "git push"
> 