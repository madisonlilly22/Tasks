text.string<-
"(((((((cow, pig), whale), (bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
vert.tree<-read.tree(text=text.string)
install.packages("phytools")
install.packages("ape")
text.string<-
"(((((((cow, pig), whale), (bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
vert.tree<-read.tree(text=text.string)
vert.tree<-read. tree(text=text.string)
setwd(~/Desktop/Evolution/Tasks/task_08)
setwd(~Desktop/Evolution/Tasks/task_08)
vert.tree<-read.tree(text=text.string)
vert.tree<-read.tree(text==text.string)
text.string<-#
"(((((((cow, pig), whale), (bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
install.packages("phytools")
library()
install.packages("ape")
library()
text.string<-
"(((((((cow, pig), whale), (bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
vert.tree<-read.tree(text=text.string)
install.packages("phytools")
library(phytools)
install.packages("ape")
library(ape)
text.string<-
"(((((((cow, pig), whale), (bat, (lemur, human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
vert.tree<-read.tree(text=text.string)#
plot(vert. tree, edge.width=2)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
tree<-read.tree(text="(((A,B), (C,D)),E);")
plotTree(tree,offset=1)
tiplabels(frame="circle", bg='lightblue', cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <-force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab="edge lengths for the Anolis tree", ylim=c(0, 50), xlim=c(0,6))
tipEdges <-which(AnolisTree$edge[,2]<= Ntip(AnolisTree))
Lengths <-AnolisTree$edge.length
names(Lengths) <-AnolisTree$tip.label
names(Lengths)[which(Lengths== min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs <-sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
plot.phylo
plotTree(AnolisTree, offset=1, show.tiplabel=FALSE)
anolis <-collapseTree(AnolisTree)
plotTree(AnolisTree, offset=1, show.tip.label=TRUE, tip.color="red")
plotTree(AnolisTree, offset=1, show.tip.label=TRUE, tip.color="red")#
AnolisTree$edge
plotTree(AnolisTree, offset=1, show.tip.label=TRUE, tip.color="red")#
AnolisTree$edge#
EdgesThatAreTips <- which(AnolisTree$edge[,2] <=Ntip(AnolisTree))
plotTree(AnolisTree, offset=1, show.tip.label=TRUE, tip.color="red")#
AnolisTree$edge#
EdgesThatAreTips <- which(AnolisTree$edge[,2] <=Ntip(AnolisTree))#
TipLengths <-AnolisTree$edge.length[EdgesThatAreTips]
plotTree(AnolisTree, offset=1, show.tip.label=TRUE, tip.color="red")#
AnolisTree$edge#
EdgesThatAreTips <- which(AnolisTree$edge[,2] <=Ntip(AnolisTree))#
TipLengths <-AnolisTree$edge.length[EdgesThatAreTips]#
AnolisTree$edge.length#
AnolisisShortestTips <-which(TipLength == min(TipLengths))#
Anolistree_no_short <- drop.tip(tree, AnolisShortestTips[1])
plotTree(AnolisTree, offset=1, show.tip.label=TRUE, tip.color="red")#
AnolisTree$edge#
EdgesThatAreTips <- which(AnolisTree$edge[,2] <=Ntip(AnolisTree))#
TipLengths <-AnolisTree$edge.length[EdgesThatAreTips]#
AnolisTree$edge.length#
AnolisisShortestTips <-which(TipLength == min(TipLengths))#
Anolistree_no_short <- drop.tip(tree, AnolisShortestTips[1])#
plot(Anolistree_no_short)
AnolisShortestTips <-which(TipLengths == min(TipLengths))
Anolistree_no_short <- drop.tip(tree, AnolisShortestTips[1])
plot(Anolistree_no_short)
llt(AnolisTree)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
fit.bd()
fit.bd(tree)
fit.bd(newspecies)
