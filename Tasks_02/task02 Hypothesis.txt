
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.73 (7892) x86_64-apple-darwin17.0]

[History restored from /Users/madisonlilly/.Rapp.history]

2021-02-10 13:17:40.822 R[45260:8715762] +[NSSavePanel _warmUp] attempted warmup
> setwd('~/Desktop/Evolution/Tasks/Tasks_02')
> Data <- read.csv ('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
> write.csv(Data, 'rawdata.csv', quote=F)
> length(data)
[1] 1
> nrow(Data)
[1] 1356
> ncol(Data)
[1] 12
> colnames(Data)
 [1] "year"         "month"        "day"          "dotw"         "start_hour"  
 [6] "start_minute" "end_hour"     "end_minute"   "event"        "value"       
[11] "units"        "caregiver"   
> head(Data)
  year month day     dotw start_hour start_minute end_hour end_minute  event
1 2019     4  18 Thursday         11           53       NA         NA  birth
2 2019    10  18   Friday          7           50       NA         NA    wet
3 2019    10  18   Friday         10            0       NA         NA    wet
4 2019    10  18   Friday         12           20       NA         NA    wet
5 2019    10  18   Friday         14           25       NA         NA    wet
6 2019    10  18   Friday          8           20       NA         NA bottle
  value units caregiver
1    NA             kch
2    NA              ap
3    NA              ap
4    NA              ap
5    NA              ap
6   1.5    oz        ap
> Data[1,]
  year month day     dotw start_hour start_minute end_hour end_minute event
1 2019     4  18 Thursday         11           53       NA         NA birth
  value units caregiver
1    NA             kch
> Data[2,]
  year month day   dotw start_hour start_minute end_hour end_minute event
2 2019    10  18 Friday          7           50       NA         NA   wet
  value units caregiver
2    NA              ap
> Data[1:3,]
  year month day     dotw start_hour start_minute end_hour end_minute event
1 2019     4  18 Thursday         11           53       NA         NA birth
2 2019    10  18   Friday          7           50       NA         NA   wet
3 2019    10  18   Friday         10            0       NA         NA   wet
  value units caregiver
1    NA             kch
2    NA              ap
3    NA              ap
> Data[1:3, 4]
[1] "Thursday" "Friday"   "Friday"  
> Data[1:5, 1:3]
  year month day
1 2019     4  18
2 2019    10  18
3 2019    10  18
4 2019    10  18
5 2019    10  18
> Feeds <- which(Data[,9] == 'bottle')
> berenMilk <- Data[Feeds ,]
> head(berenMilk)
   year month day     dotw start_hour start_minute end_hour end_minute  event
6  2019    10  18   Friday          8           20       NA         NA bottle
7  2019    10  18   Friday         10           40       NA         NA bottle
8  2019    10  18   Friday         12           30       NA         NA bottle
9  2019    10  18   Friday         14           53       NA         NA bottle
20 2019    10  17 Thursday          9            8       NA         NA bottle
21 2019    10  17 Thursday         11            5       NA         NA bottle
   value units caregiver
6    1.5    oz        ap
7    2.5    oz        ap
8    2.0    oz        ap
9    2.0    oz        ap
20   3.0    oz      vona
21   2.0    oz      vona
> Feeds <- which(Data[, 'event'] == 'bottle')
> Feeds <- which (Data$event == 'bottle')
> dayID <- apply (Data, 1, function(x) paste (x[1:3], collapse= '-'))
> dateID <- sapply (dayID, as.Date, format = "%Y-%m-%d" , origin= "2019-04-18")
> Data$age <- dateID - dateID[which(Data$event == 'birth')]
> head(Data)
  year month day     dotw start_hour start_minute end_hour end_minute  event
1 2019     4  18 Thursday         11           53       NA         NA  birth
2 2019    10  18   Friday          7           50       NA         NA    wet
3 2019    10  18   Friday         10            0       NA         NA    wet
4 2019    10  18   Friday         12           20       NA         NA    wet
5 2019    10  18   Friday         14           25       NA         NA    wet
6 2019    10  18   Friday          8           20       NA         NA bottle
  value units caregiver age
1    NA             kch   0
2    NA              ap 183
3    NA              ap 183
4    NA              ap 183
5    NA              ap 183
6   1.5    oz        ap 183
> beren2 <- Data
> beren3 <- beren2[order(beren2$age),]
> 
> #Correlation doesn't mean causation 
> Feeds <- which(beren3$event == "bottle")
> avgMilk <- mean(beren3$value[Feeds])
> avgFeed <- tapply(beren3$value [Feeds], beren3$age[Feeds], mean)
> varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
> totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
> numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
> cor(beren3$value[Feeds], beren3$age[Feeds])
[1] -0.08224024
> cor.test(beren3$value[Feeds], beren3$age[Feeds])

	Pearson's product-moment correlation

data:  beren3$value[Feeds] and beren3$age[Feeds]
t = -1.4762, df = 320, p-value = 0.1409
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.18983242  0.02730373
sample estimates:
        cor 
-0.08224024 

> berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
> summary(berenCor)
            Length Class  Mode     
statistic   1      -none- numeric  
parameter   1      -none- numeric  
p.value     1      -none- numeric  
estimate    1      -none- numeric  
null.value  1      -none- numeric  
alternative 1      -none- character
method      1      -none- character
data.name   1      -none- character
conf.int    2      -none- numeric  
> berenANOVA <-aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
> boxplot( beren3$value[Feeds]~ beren3$caregiver[Feeds], xlab= "who have the bottle" , ylab = "amount of milk consumed (oz)")
> ?par
starting httpd help server ... done
> par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
> plot(as.numeric(names(totalFeed)), totalFeed, type="b" , pch=16, xlab="age in days", ylab="ounces of milk")
> abline(h=mean(totalFeed), lty=2, col='red')
> pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
> par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
> plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16 xlab="age in days", ylab="ounces of milk")
Error: unexpected symbol in "plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16 xlab"
> abline(h=mean(totalFeed), lty=2, col='red')
Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : 
  plot.new has not been called yet
> dev.off()
quartz 
     2 
> 
> Circumference <- which(Data[,9] == 'trait_head')
> berenCircumference <- Data[Circumference,]
> Circumference <- which(Data[,'event'] == 'trait_head')
> Circumference <- which (berenCircumference$event == 'trait head')
> Circumference <- which(Data$event == 'trait_head')
> avgCircumference <-mean(berenCircumference$value[Circumference])
> avgCircumference <-tapply(berenCircumference$value[Circumference], berenCirumference$age[Cifcumference], mean)
Error in tapply(berenCircumference$value[Circumference], berenCirumference$age[Cifcumference],  : 
  object 'berenCirumference' not found
> avgCircumference <-tapply(berenCircumference$value[Circumference], berenCirumference$age[Circumference], mean)
Error in tapply(berenCircumference$value[Circumference], berenCirumference$age[Circumference],  : 
  object 'berenCirumference' not found
> 
> avgCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], mean)
> varCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference],mean)
> varCirumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], var)
> totalCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], sum)
> numCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], length)
> cor(berenCircumference$value[Circumference], berenCircumference$age[Circumference])
[1] NA
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference], method="spearm", alternative="greater")
Error in cor.test.default(berenCircumference$value[Circumference], berenCircumference$age[Circumference],  : 
  not enough finite observations
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference], berenCirumference$age[Circumference] method="spearm", alternative="greater")
Error: unexpected symbol in "cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference], berenCirumference$age[Circumference] method"
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference], method="spearm", alternative="greater")
Error in cor.test.default(berenCircumference$value[Circumference], berenCircumference$age[Circumference],  : 
  not enough finite observations
> CircumferenceCor <-cor.test(berenCircumference$value[Circumference], berenCircumference$age [Circumference], method="spearm", alternative="greater")
Error in cor.test.default(berenCircumference$value[Circumference], berenCircumference$age[Circumference],  : 
  not enough finite observations
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference]
+ CircumferenceCor <-cor.test(berenCircumference$value[Circumference], berenCircumference$age [Circumference]
Error: unexpected symbol in:
"cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference]
CircumferenceCor"
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference])
Error in cor.test.default(berenCircumference$value[Circumference], berenCircumference$age[Circumference]) : 
  not enough finite observations
> Circumference <- which(Data[,9] == 'trait_head_circum')
> berenCircumference <- Data[Circumference,]
> Circumference <- which(Data[,'event'] == 'trait_head_circum')
> Circumference <- which(Data$event == 'trait_head_circum')
> Circumference <- which (berenCircumference$event == 'trait_head_circum')
> avgCircumference <-mean(berenCircumference$value[Circumference])
> avgCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], mean)
> varCirumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], var)
> totalCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], sum)
> numCircumference <-tapply(berenCircumference$value[Circumference], berenCircumference$age[Circumference], length)
> cor(berenCircumference$value[Circumference], berenCircumference$age[Circumference])
[1] 0.8759189
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference])

	Pearson's product-moment correlation

data:  berenCircumference$value[Circumference] and berenCircumference$age[Circumference]
t = 3.1446, df = 3, p-value = 0.05148
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.02793716  0.99175961
sample estimates:
      cor 
0.8759189 

> CircumferenceCor <-cor.test(berenCircumference$value[Circumference], berenCircumference$age [Circumference]
+ l
Error: unexpected symbol in:
"CircumferenceCor <-cor.test(berenCircumference$value[Circumference], berenCircumference$age [Circumference]
l"
> cor.test(berenCircumference$value[Circumference], berenCircumference$age[Circumference], method="spearm",alternative="greater")

	Spearman's rank correlation rho

data:  berenCircumference$value[Circumference] and berenCircumference$age[Circumference]
S = 4.4409e-15, p-value = 0.008333
alternative hypothesis: true rho is greater than 0
sample estimates:
rho 
  1 

> CircumferenceCor <-cor.test(berenCircumference$value[Circumference], berenCircumference$age [Circumference], method="spearm", alternative="greater")
> summary(lengthCor)
Error in summary(lengthCor) : object 'lengthCor' not found
> summary(headCor)
Error in summary(headCor) : object 'headCor' not found
> summary(head_traitCor)
Error in summary(head_traitCor) : object 'head_traitCor' not found
> summary(lenghthCor)
Error in summary(lenghthCor) : object 'lenghthCor' not found
> summary(CirumferenceCor)
Error in summary(CirumferenceCor) : object 'CirumferenceCor' not found
> summary(head_trait_CircumferenceCor)
Error in summary(head_trait_CircumferenceCor) : 
  object 'head_trait_CircumferenceCor' not found
> summary(circumCor)
Error in summary(circumCor) : object 'circumCor' not found
> summary(headcircumCor)
Error in summary(headcircumCor) : object 'headcircumCor' not found
> par(las=1, mar=c(5,5,1,1), mpg=c(2,0.5,0), tck=-0.01)
Warning message:
In par(las = 1, mar = c(5, 5, 1, 1), mpg = c(2, 0.5, 0), tck = -0.01) :
  "mpg" is not a graphical parameter
> par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
> summary(circumferenceCor)
Error in summary(circumferenceCor) : object 'circumferenceCor' not found
> summary(headCor)
Error in summary(headCor) : object 'headCor' not found
> summary(trait_head_circum)
Error in summary(trait_head_circum) : 
  object 'trait_head_circum' not found
> summary(trait_head_circumCor)
Error in summary(trait_head_circumCor) : 
  object 'trait_head_circumCor' not found
> 